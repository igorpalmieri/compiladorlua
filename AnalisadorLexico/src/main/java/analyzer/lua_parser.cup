package analyzer;

import java_cup.runtime.*;


parser code {:

    public void report_error(String message, Object info)  {
        System.out.println("Warning - " + message);
    }

    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message);
        System.exit(-1);
    }

	public void syntax_error(Symbol cur_token) {
		System.out.println("Syntax Error - " + cur_token);
	}
:};


terminal LUAToken APAR,FPAR,ACOL,FCOL,ACHA,FCHA,PONTO,PVIRGULA;
terminal LUAToken VIRGULA,DPONTOS,TPONTOS,ATRIBUICAO;
terminal LUAToken VALUE,NAME,STRING,BINOP,UNOP,NUMBER;
terminal LUAToken DO,END,WHILE,REPEAT,UNTIL,IF,THEN,ELSEIF,ELSE,FOR,IN,FUNCTION,LOCAL,RETURN,BREAK;

non terminal Node chunk, stat, laststat, block, varlist, explist, functioncall;
non terminal Node exp, namelist, function, funcname, funcbody, var, prefixexp;
non terminal Node tableconstructor, args, parlist, fieldlist, field, fieldsep;

start with chunk;

chunk ::=  stat:s PVIRGULA:t {: RESULT = new Node(t.value,t.start,s,null); :}
		| stat:s1 PVIRGULA:t chunk:s2 {: RESULT = new Node(t.value,t.start,s1,s2); :}
		| stat PVIRGULA laststat PVIRGULA;

block ::= chunk;

stat ::=  varlist:n1 ATRIBUICAO:t explist:n2 {: RESULT = new Node(t.value,t.start,n1,n2); :} | 
	      functioncall | DO block END | 
		  WHILE exp DO block END | REPEAT block UNTIL exp |
		  IF exp THEN block ACHA ELSEIF exp THEN block FCHA ELSE block END |
		  FOR NAME ATRIBUICAO exp VIRGULA exp VIRGULA exp DO block END |
		  FOR namelist IN explist DO block END |
		  FUNCTION funcname funcbody | LOCAL FUNCTION NAME funcbody |
		  LOCAL namelist ATRIBUICAO explist;
		  
laststat ::= RETURN explist | BREAK;

funcname ::= NAME ACHA PONTO NAME FCHA DPONTOS NAME;

varlist ::= var:n {: RESULT = n; :} | var VIRGULA varlist;

var ::= NAME:t {: RESULT = new Node(t.value,t.start); :} | prefixexp ACOL exp FCOL | prefixexp PONTO NAME;

namelist ::= NAME ACHA VIRGULA NAME FCHA;

explist ::= exp:n {: RESULT = n; :} | exp VIRGULA explist;

exp ::= VALUE | NUMBER:t {: RESULT = new Node(t.value,t.start); :} | STRING | TPONTOS | function | prefixexp |
		tableconstructor | exp BINOP exp | UNOP exp;
		
prefixexp ::= var | functioncall | APAR exp FPAR;

functioncall ::= prefixexp args | prefixexp DPONTOS NAME args;

args ::= APAR explist FPAR | tableconstructor | STRING;

function ::= FUNCTION funcbody;

funcbody ::= APAR parlist FPAR block END;

parlist ::= namelist VIRGULA TPONTOS | TPONTOS;

tableconstructor ::= ACHA fieldlist FCHA;

fieldlist ::= field ACHA fieldsep field FCHA;

field ::= ACOL exp FCOL ATRIBUICAO exp | NAME ATRIBUICAO exp | exp;

fieldsep ::= VIRGULA | PVIRGULA;


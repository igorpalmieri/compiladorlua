package analyzer;

import java_cup.runtime.*;

parser code {:

    public void report_error(String message, Object info)  {
        System.out.println("Warning - " + message);
    }

    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message);
        System.exit(-1);
    }

	public void syntax_error(Symbol cur_token) {
		System.out.println("Syntax Error - " + ((LUAToken)cur_token.value).value);
		System.out.println("Syntax Error - " + ((LUAToken)cur_token.value).start);
	}
:};


terminal LUAToken APAR,FPAR,ACOL,FCOL,ACHA,FCHA,PONTO,PVIRGULA;
terminal LUAToken VIRGULA,DPONTOS,PONTOS3,ATRIBUICAO;
terminal LUAToken NAME,STRING,NUMBER;
terminal LUAToken DO,END,WHILE,REPEAT,UNTIL,IF,THEN,ELSEIF,ELSE,FOR,IN,FUNCTION,LOCAL,RETURN,BREAK;
terminal LUAToken MAIS,MENOS,MULTIPLICACAO,DIVISAO,EXPOENTE,RESTO,PONTOS2;
terminal LUAToken MENORIGUAL,MAIORIGUAL,MENOR,MAIOR,IGUAL,DIFERENTE;
terminal LUAToken AND,OR,NIL,TRUE,FALSE,NOT,TRALHA;

non terminal Node chunk, stat, laststat, block, varlist, explist, functioncall;
non terminal Node exp, namelist, function, funcname, funcbody, var, prefixexp;
non terminal Node tableconstructor, args, parlist, fieldlist, field, fieldsep;
non terminal Node elseif,funcname2,varlist2,fieldlist2,namelist2,explist2;

precedence left EXPOENTE,NOT,TRALHA,MENOS,MULTIPLICACAO,DIVISAO,RESTO,MAIS,PONTOS2,MENOR,MAIOR,MENORIGUAL,MAIORIGUAL,DIFERENTE,IGUAL,AND,OR;

start with chunk;

chunk ::= stat:n 
		{: 
			RESULT = new Node("chunk",n,"{0}"); 
		:} 
		| stat:n PVIRGULA:t 
		{: 
			Node[] k = {n,new Node(t)}; 
			RESULT = new Node("chunk",k,"{0}"); 
		:}
		| stat:n1 PVIRGULA:t chunk:n2 
		{: 
			Node[] k = {n1,new Node(t),n2}; 
			RESULT = new Node("chunk",k,"{0} \n {2}"); 
		:}
		| stat:n1 PVIRGULA:t1 laststat:n2 PVIRGULA:t2 
		{: 
			Node[] k = {n1,new Node(t1),n2,new Node(t2)}; 
			RESULT = new Node("chunk",k,"{0} \n {2}"); 
		:};

block ::= chunk:n 
		{: 
			Node[] k = {n}; RESULT = new Node("block",k,"{0}"); 
		:};

stat ::=  varlist:n1 ATRIBUICAO:t explist:n2 
		{: 
			Node[] k = {n1,new Node(t),n2}; 
			RESULT = new Node("stat",k,"executa codigo de atribuicao"); 
		:} 
        | functioncall:n 
        {: 
        	RESULT = n; 
        :}  
        | DO:t1 block:n END:t2 
        {: 
        	Node[] k = {new Node(t1),n,new Node(t2)}; 
        	RESULT = new Node("stat",k,"{1}"); 
        :} 
        | WHILE:t1 exp:n1 DO:t2 block:n2 END:t3 
        {: 
        	Node[] k = {new Node(t1),n1,new Node(t2),n2,new Node(t3)}; 
        	RESULT = new Node("stat",k,"L0:\n if !{1} goto L1 \n {3} \n goto L0 \n L1: "); 
        :}
        | REPEAT:t1 block:n1 UNTIL:t2 exp:n2 
        {: 
        	Node[] k = {new Node(t1),n1,new Node(t2),n2};
        	RESULT = new Node("stat",k,"L0:\n {1} \n if {3} goto L0");
        :}
        | IF:t1 exp:n1 THEN:t2 block:n2 END:t3 
        {: 
        	Node[] k = {new Node(t1),n1,new Node(t2),n2,new Node(t3)}; 
        	RESULT = new Node("stat",k,"{1} \nif !t1 goto L0 \n {3} \nL0:"); 
        :} 
        | IF:t1 exp:n1 THEN:t2 block:n2 ELSE:t3 block:n3 END:t4 {: Node[] k = {new Node(t1),n1,new Node(t2),n2,new Node(t3),n3,new Node(t4)}; RESULT = new Node("stat",k); :} 
        | IF:t1 exp:n1 THEN:t2 block:n2 elseif:n3 END:t3 {: Node[] k = {new Node(t1),n1,new Node(t2),n2,n3,new Node(t3)}; RESULT = new Node("stat",k); :}
        | IF:t1 exp:n1 THEN:t2 block:n2 elseif:n3 ELSE:t3 block:n4 END:t4 {: Node[] k = {new Node(t1),n1,new Node(t2),n2,n3,new Node(t3),n4,new Node(t4)}; RESULT = new Node("stat",k); :}
        | FOR:t1 NAME:t2 ATRIBUICAO:t3 exp:n1 VIRGULA:t4 exp:n2 DO:t5 block:n3 END:t6 {: Node[] k = {new Node(t1),new Node(t2),new Node(t3),n1,new Node(t4),n2,new Node(t5),n3,new Node(t6)}; RESULT = new Node("stat",k); :}
        | FOR:t1 NAME:t2 ATRIBUICAO:t3 exp:n1 VIRGULA:t4 exp:n2 VIRGULA:t5 exp:n3 DO:t6 block:n4 END:t7 {: Node[] k = {new Node(t1),new Node(t2),new Node(t3),n1,new Node(t4),n2,new Node(t5),n3,new Node(t6),n4,new Node(t7)}; RESULT = new Node("stat",k); :}
        | FOR:t1 namelist:n1 IN:t2 explist:n2 DO:t3 block:n3 END:t4 {: Node[] k = {new Node(t1),n1,new Node(t2),n2,new Node(t3),n3, new Node(t4)}; RESULT = new Node("stat",k); :}
        | FUNCTION:t1 funcname:n1 funcbody:n2 {: Node[] k = {new Node(t1),n1,n2}; RESULT = new Node("stat",k); :}
        | LOCAL:t1 FUNCTION:t2 NAME:t3 funcbody:n1 {: Node[] k = {new Node(t1),new Node(t2),new Node(t3),n1}; RESULT = new Node("stat",k); :}
        | LOCAL:t1 namelist:n1 {: Node[] k = {new Node(t1),n1}; RESULT = new Node("stat",k); :}
        | LOCAL:t1 namelist:n1 ATRIBUICAO:t2 explist:n2 {: Node[] k = {new Node(t1),n1,new Node(t2),n2}; RESULT = new Node("stat",k); :};
        

elseif ::= ELSEIF:t1 exp:n1 THEN:t2 block:n2 {: Node[] k = {new Node(t1),n1,new Node(t2),n2}; RESULT = new Node("elseif",k); :}
		 | ELSEIF:t1 exp:n1 THEN:t2 block:n2 elseif:n3 {: Node[] k = {new Node(t1),n1,new Node(t2),n2,n3}; RESULT = new Node("elseif",k); :};
	  
laststat ::= RETURN:t1 explist:n1 {: Node[] k = {new Node(t1),n1}; RESULT = new Node("laststat",k); :} 
		   | BREAK:t1 {: Node[] k = {new Node(t1)}; RESULT = new Node("laststat",k); :};

funcname ::= NAME:t1 {: Node[] k = {new Node(t1)}; RESULT = new Node("funcname",k); :} 
		   | NAME:t1 funcname2:n1 {: Node[] k = {new Node(t1),n1}; RESULT = new Node("funcname",k); :} 
		   | NAME:t1 funcname2:n1 DPONTOS:t2 NAME:t3 {: Node[] k = {new Node(t1),n1,new Node(t2),new Node(t3)}; RESULT = new Node("funcname",k); :};

funcname2 ::= PONTO:t1 NAME:t2 {: Node[] k = {new Node(t1),new Node(t2)}; RESULT = new Node("funcname2",k); :} 
			| PONTO:t1 NAME:t2 funcname2:n1 {: Node[] k = {new Node(t1),new Node(t2),n1}; RESULT = new Node("laststat",k); :};

varlist ::= var:n {: RESULT = n; :} 
          | var:n1 varlist2:n2 {: Node[] k = {n1,n2}; RESULT = new Node("varlist",k); :} ;

varlist2 ::= VIRGULA:t1 var:n1 {: Node[] k = {new Node(t1),n1}; RESULT = new Node("varlist2",k); :}
		   | VIRGULA:t1 varlist2:n1 {: Node[] k = {new Node(t1),n1}; RESULT = new Node("varlist2",k); :} ;

var ::= NAME:t {: RESULT = new Node(t); :} 
      | prefixexp:n1 ACOL:t1 exp:n2 FCOL:t2 {: Node[] k = {n1,new Node(t1),n2,new Node(t2)}; RESULT = new Node("var",k); :}  
      | prefixexp:n1 PONTO:t1 NAME:t2 {: Node[] k = {n1,new Node(t1),new Node(t2)}; RESULT = new Node("var",k); :}  ;

namelist ::= NAME:t1 {: RESULT = new Node("namelist",new Node(t1));  :} 
           | NAME:t1 varlist2:n1 {: Node[] k = {new Node(t1),n1}; RESULT = new Node("namelist",k); :} ;

namelist2 ::= VIRGULA:t1 NAME:t2 {: Node[] k = {new Node(t1),new Node(t2)}; RESULT = new Node("namelist2",k); :}
		    | VIRGULA:t1 namelist2:n1 {: Node[] k = {new Node(t1),n1}; RESULT = new Node("namelist2",k); :} ;

explist ::= exp:n {: RESULT = n; :} 
          | exp:n1 explist2:n2 {: Node[] k = {n1,n2}; RESULT = new Node("explist",k); :} ;

explist2 ::= VIRGULA:t1 exp:n1 {: Node[] k = {new Node(t1),n1}; RESULT = new Node("explist2",k); :}
		   | VIRGULA:t1 explist2:n1 {: Node[] k = {new Node(t1),n1}; RESULT = new Node("explist2",k); :} ;

exp ::= NIL:t1 {: RESULT = new Node("exp",new Node(t1));  :}  
	  | FALSE:t1 {: RESULT = new Node("exp",new Node(t1));  :}  
	  | TRUE:t1 {: RESULT = new Node("exp",new Node(t1));  :}  
      | NUMBER:t1 
      {: 
      	RESULT = new Node("exp",new Node(t1),t1.value);  
      :} 
      | STRING:t1 {: RESULT = new Node("exp",new Node(t1));  :}  
      | PONTOS3:t1 {: RESULT = new Node("exp",new Node(t1));  :}  
      | function:n1 {: RESULT = new Node("exp",n1);  :}  
      | prefixexp:n1 {: RESULT = new Node("exp",n1,"{0}");  :}  
      | tableconstructor:n1 {: RESULT = new Node("exp",n1);  :}  
      | exp:n1 MAIS:t1 exp:n2 {: Node[] k = {n1,new Node(t1),n2}; RESULT = new Node("exp",k); :}
      | exp:n1 MENOS:t1 exp:n2 {: Node[] k = {n1,new Node(t1),n2}; RESULT = new Node("exp",k); :}
      | exp:n1 MULTIPLICACAO:t1 exp:n2 {: Node[] k = {n1,new Node(t1),n2}; RESULT = new Node("exp",k); :}
      | exp:n1 DIVISAO:t1 exp:n2 {: Node[] k = {n1,new Node(t1),n2}; RESULT = new Node("exp",k); :}
      | exp:n1 EXPOENTE:t1 exp:n2 {: Node[] k = {n1,new Node(t1),n2}; RESULT = new Node("exp",k); :}
      | exp:n1 RESTO:t1 exp:n2 {: Node[] k = {n1,new Node(t1),n2}; RESULT = new Node("exp",k); :}
      | exp:n1 PONTOS2:t1 exp:n2 {: Node[] k = {n1,new Node(t1),n2}; RESULT = new Node("exp",k); :}
      | exp:n1 MENORIGUAL:t1 exp:n2 {: Node[] k = {n1,new Node(t1),n2}; RESULT = new Node("exp",k); :}
      | exp:n1 MAIORIGUAL:t1 exp:n2 {: Node[] k = {n1,new Node(t1),n2}; RESULT = new Node("exp",k); :}
      | exp:n1 MENOR:t1 exp:n2 {: Node[] k = {n1,new Node(t1),n2}; RESULT = new Node("exp",k); :}
      | exp:n1 MAIOR:t1 exp:n2 
      {: 
      	Node[] k = {n1,new Node(t1),n2}; 
      	RESULT = new Node("exp",k,"t1 := {0} > {2}"); 
      :}
      | exp:n1 IGUAL:t1 exp:n2 {: Node[] k = {n1,new Node(t1),n2}; RESULT = new Node("exp",k); :}
      | exp:n1 DIFERENTE:t1 exp:n2 {: Node[] k = {n1,new Node(t1),n2}; RESULT = new Node("exp",k); :}
      | exp:n1 AND:t1 exp:n2 {: Node[] k = {n1,new Node(t1),n2}; RESULT = new Node("exp",k); :}
      | exp:n1 OR:t1 exp:n2 {: Node[] k = {n1,new Node(t1),n2}; RESULT = new Node("exp",k); :}
      | MENOS:t1 exp:n1 {: Node[] k = {new Node(t1),n1}; RESULT = new Node("exp",k); :}
	  | NOT:t1 exp:n1 {: Node[] k = {new Node(t1),n1}; RESULT = new Node("exp",k); :}
      | TRALHA:t1 exp:n1 {: Node[] k = {new Node(t1),n1}; RESULT = new Node("exp",k); :};
		
prefixexp ::= var:n1 {: RESULT = new Node("prefixexp",n1); :}   
            | functioncall:n1 {: RESULT = new Node("prefixexp",n1);  :}   
            | APAR:t1 exp:n1 FPAR:t2 
            {: 
            	Node[] k = {new Node(t1),n1,new Node(t2)}; 
            	RESULT = new Node("prefixexp",k,"{1}"); 
            :};

functioncall ::= prefixexp:n1 args:n2  {: Node[] k = {n1,n2}; RESULT = new Node("functioncall",k); :}
               | prefixexp:n1 DPONTOS:t1 NAME:t2 args:n2  {: Node[] k = {n1,new Node(t1),new Node(t2),n2}; RESULT = new Node("functioncall",k); :};

args ::= APAR:t1 explist:n1 FPAR:t2 {: Node[] k = {new Node(t1),n1,new Node(t2)}; RESULT = new Node("args",k); :}
       | tableconstructor:n1 {: RESULT = new Node("tableconstructor",n1); :}  
       | STRING:t1 {: RESULT = new Node("args",new Node(t1));  :} ;

function ::= FUNCTION:t1 funcbody:n1 {: Node[] k = {new Node(t1),n1}; RESULT = new Node("function",k); :};

funcbody ::= APAR:t1 parlist:n1 FPAR:t2 block:n2 END:t3 {: Node[] k = {new Node(t1),n1,new Node(t2),n2,new Node(t3)}; RESULT = new Node("funcbody",k); :};

parlist ::= namelist:n1 {: RESULT = new Node("parlist",n1); :} 
		  | namelist:n1 VIRGULA:t1 PONTOS3:t2 {: Node[] k = {n1,new Node(t1),new Node(t2)}; RESULT = new Node("parlist",k); :}
		  | PONTOS3:t1 {: RESULT = new Node("parlist",new Node(t1));  :} ;

tableconstructor ::= ACHA:t1 FCHA:t2 {: Node[] k = {new Node(t1),new Node(t2)}; RESULT = new Node("tableconstructor",k); :} 
				   | ACHA:t1 fieldlist:n1 FCHA:t2 {: Node[] k = {new Node(t1),n1,new Node(t2)}; RESULT = new Node("tableconstructor",k); :};

fieldlist ::= field:n1 fieldlist2:n2 {: Node[] k = {n1,n2}; RESULT = new Node("fieldlist",k); :}
            | field:n1 fieldlist2:n2 fieldsep:n3 {: Node[] k = {n1,n2,n3}; RESULT = new Node("fieldlist",k); :};

fieldlist2 ::= fieldsep:n1 field:n2 {: Node[] k = {n1,n2}; RESULT = new Node("fieldlist2",k); :}
             | fieldsep:n1 field:n2 fieldlist2:n3 {: Node[] k = {n1,n2,n3}; RESULT = new Node("fieldlist2",k); :};

field ::= ACOL:t1 exp:n1 FCOL:t2 ATRIBUICAO:t3 exp:n2 {: Node[] k = {new Node(t1),n1,new Node(t2),new Node(t3),n2}; RESULT = new Node("field",k); :} 
        | NAME:t1 ATRIBUICAO:t2 exp:n1 {: Node[] k = {new Node(t1),new Node(t2),n1}; RESULT = new Node("field",k); :}
        | exp:n1 {: RESULT = new Node("field",n1);  :}  ;

fieldsep ::= VIRGULA:t1 {: RESULT = new Node("fieldsep",new Node(t1));  :} 
           | PVIRGULA:t1 {: RESULT = new Node("fieldsep",new Node(t1));  :} ;


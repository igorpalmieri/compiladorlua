
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Dec 16 13:35:26 BRST 2016
//----------------------------------------------------

package analyzer;

import java_cup.runtime.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Dec 16 13:35:26 BRST 2016
  */
public class AnalisadorSintatico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalisadorSintatico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalisadorSintatico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalisadorSintatico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\004\000\002\002\005\000\002\002\003" +
    "\000\002\002\004\000\002\005\003\000\002\003\005\000" +
    "\002\003\003\000\002\003\005\000\002\003\007\000\002" +
    "\003\006\000\002\003\007\000\002\003\011\000\002\003" +
    "\010\000\002\003\013\000\002\003\015\000\002\003\011" +
    "\000\002\003\005\000\002\003\006\000\002\003\004\000" +
    "\002\003\006\000\002\026\006\000\002\026\007\000\002" +
    "\026\010\000\002\004\004\000\002\004\003\000\002\004" +
    "\003\000\002\014\003\000\002\014\005\000\002\014\005" +
    "\000\002\006\003\000\002\006\005\000\002\016\003\000" +
    "\002\016\006\000\002\016\005\000\002\012\003\000\002" +
    "\012\005\000\002\007\003\000\002\007\005\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\017\003\000\002\017\003\000\002\017\005" +
    "\000\002\010\004\000\002\010\006\000\002\021\005\000" +
    "\002\021\004\000\002\021\003\000\002\021\003\000\002" +
    "\013\004\000\002\015\006\000\002\015\007\000\002\022" +
    "\003\000\002\022\005\000\002\022\003\000\002\020\004" +
    "\000\002\020\005\000\002\023\003\000\002\023\004\000" +
    "\002\023\004\000\002\027\004\000\002\027\005\000\002" +
    "\027\005\000\002\024\007\000\002\024\005\000\002\024" +
    "\003\000\002\025\003\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\030\004\011\020\010\023\015\025\004\026" +
    "\025\030\013\034\023\036\012\037\006\040\007\041\017" +
    "\001\002\000\034\004\011\010\051\016\040\020\010\021" +
    "\041\022\042\036\034\043\031\061\037\062\036\063\046" +
    "\064\032\065\044\001\002\000\016\002\ufffc\013\276\024" +
    "\ufffc\027\ufffc\032\ufffc\033\ufffc\001\002\000\006\020\205" +
    "\036\271\001\002\000\050\002\uffe6\004\011\010\051\013" +
    "\uffe6\016\040\020\010\021\041\022\042\024\uffe6\027\uffe6" +
    "\032\uffe6\033\uffe6\036\034\043\031\061\037\062\036\063" +
    "\046\064\032\065\044\001\002\000\130\002\uffdf\004\uffdf" +
    "\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\015\uffdf\017\uffdf\020\uffdf\021\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf" +
    "\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050" +
    "\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf" +
    "\057\uffdf\060\uffdf\001\002\000\034\004\011\010\051\016" +
    "\040\020\010\021\041\022\042\036\034\043\031\061\037" +
    "\062\036\063\046\064\032\065\044\001\002\000\004\020" +
    "\257\001\002\000\034\004\011\010\051\016\040\020\010" +
    "\021\041\022\042\036\034\043\031\061\037\062\036\063" +
    "\046\064\032\065\044\001\002\000\004\002\235\001\002" +
    "\000\030\004\011\020\010\023\015\025\004\026\025\030" +
    "\013\034\023\036\012\037\006\040\007\041\017\001\002" +
    "\000\056\002\ufff8\004\ufff8\006\uffbc\010\uffbc\012\uffbc\013" +
    "\ufff8\015\uffbc\020\ufff8\021\uffbc\023\ufff8\024\ufff8\025\ufff8" +
    "\026\ufff8\027\ufff8\030\ufff8\032\ufff8\033\ufff8\034\ufff8\036" +
    "\ufff8\037\ufff8\040\ufff8\041\ufff8\001\002\000\016\002\uffe5" +
    "\013\uffe5\024\uffe5\027\uffe5\032\uffe5\033\uffe5\001\002\000" +
    "\016\004\140\006\135\010\051\012\141\015\137\021\134" +
    "\001\002\000\044\002\000\004\011\013\231\020\010\023" +
    "\015\024\000\025\004\026\025\027\000\030\013\032\000" +
    "\033\000\034\023\036\012\037\006\040\007\041\017\001" +
    "\002\000\022\004\uffbd\006\uffbd\010\uffbd\012\uffbd\014\226" +
    "\015\uffbd\017\uffe1\021\uffbd\001\002\000\004\020\201\001" +
    "\002\000\004\017\176\001\002\000\030\004\011\020\010" +
    "\023\015\025\004\026\025\030\013\034\023\036\012\037" +
    "\006\040\007\041\017\001\002\000\004\027\030\001\002" +
    "\000\012\024\ufffa\027\ufffa\032\ufffa\033\ufffa\001\002\000" +
    "\034\004\011\010\051\016\040\020\010\021\041\022\042" +
    "\036\034\043\031\061\037\062\036\063\046\064\032\065" +
    "\044\001\002\000\034\004\011\010\051\016\040\020\010" +
    "\021\041\022\042\036\034\043\031\061\037\062\036\063" +
    "\046\064\032\065\044\001\002\000\034\004\011\010\051" +
    "\016\040\020\010\021\041\022\042\036\034\043\031\061" +
    "\037\062\036\063\046\064\032\065\044\001\002\000\114" +
    "\002\uffd2\004\uffd2\005\uffd2\007\uffd2\011\uffd2\013\uffd2\014" +
    "\uffd2\020\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2" +
    "\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2" +
    "\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054" +
    "\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\001\002\000\004" +
    "\004\157\001\002\000\102\002\ufff5\004\ufff5\013\ufff5\020" +
    "\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5" +
    "\032\ufff5\033\ufff5\034\ufff5\036\ufff5\037\ufff5\040\ufff5\041" +
    "\ufff5\042\063\043\065\044\072\045\075\046\074\047\070" +
    "\050\064\051\062\052\071\053\067\054\066\055\073\056" +
    "\076\057\061\060\077\001\002\000\114\002\uffd6\004\uffd6" +
    "\005\uffd6\007\uffd6\011\uffd6\013\uffd6\014\uffd6\020\uffd6\023" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\036\uffd6\037\uffd6\040\uffd6\041" +
    "\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6" +
    "\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056" +
    "\uffd6\057\uffd6\060\uffd6\001\002\000\114\002\uffd8\004\uffd8" +
    "\005\uffd8\007\uffd8\011\uffd8\013\uffd8\014\uffd8\020\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\036\uffd8\037\uffd8\040\uffd8\041" +
    "\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8" +
    "\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056" +
    "\uffd8\057\uffd8\060\uffd8\001\002\000\114\002\uffd3\004\uffd3" +
    "\005\uffd3\007\uffd3\011\uffd3\013\uffd3\014\uffd3\020\uffd3\023" +
    "\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\034\uffd3\036\uffd3\037\uffd3\040\uffd3\041" +
    "\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3" +
    "\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056" +
    "\uffd3\057\uffd3\060\uffd3\001\002\000\114\002\uffd4\004\uffd4" +
    "\005\uffd4\007\uffd4\011\uffd4\013\uffd4\014\uffd4\020\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\036\uffd4\037\uffd4\040\uffd4\041" +
    "\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4" +
    "\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056" +
    "\uffd4\057\uffd4\060\uffd4\001\002\000\114\002\uffd5\004\uffd5" +
    "\005\uffd5\007\uffd5\011\uffd5\013\uffd5\014\uffd5\020\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\036\uffd5\037\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5" +
    "\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056" +
    "\uffd5\057\uffd5\060\uffd5\001\002\000\126\002\uffbc\004\uffbc" +
    "\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013" +
    "\uffbc\014\uffbc\015\uffbc\020\uffbc\021\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc" +
    "\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051" +
    "\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc" +
    "\060\uffbc\001\002\000\034\004\011\010\051\016\040\020" +
    "\010\021\041\022\042\036\034\043\031\061\037\062\036" +
    "\063\046\064\032\065\044\001\002\000\114\002\uffd0\004" +
    "\uffd0\005\uffd0\007\uffd0\011\uffd0\013\uffd0\014\uffd0\020\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031" +
    "\uffd0\032\uffd0\033\uffd0\034\uffd0\036\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047" +
    "\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0" +
    "\056\uffd0\057\uffd0\060\uffd0\001\002\000\114\002\uffd7\004" +
    "\uffd7\005\uffd7\007\uffd7\011\uffd7\013\uffd7\014\uffd7\020\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\033\uffd7\034\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047" +
    "\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7" +
    "\056\uffd7\057\uffd7\060\uffd7\001\002\000\126\002\uffd1\004" +
    "\140\005\uffd1\006\135\007\uffd1\010\051\011\uffd1\012\141" +
    "\013\uffd1\014\uffd1\015\137\020\uffd1\021\134\023\uffd1\024" +
    "\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042" +
    "\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1" +
    "\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057" +
    "\uffd1\060\uffd1\001\002\000\126\002\uffbd\004\uffbd\005\uffbd" +
    "\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\020\uffbd\021\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034" +
    "\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd" +
    "\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052" +
    "\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd" +
    "\001\002\000\040\004\011\006\052\010\051\011\056\016" +
    "\040\020\054\021\041\022\042\036\034\043\031\061\037" +
    "\062\036\063\046\064\032\065\044\001\002\000\034\004" +
    "\011\010\051\016\040\020\010\021\041\022\042\036\034" +
    "\043\031\061\037\062\036\063\046\064\032\065\044\001" +
    "\002\000\010\011\uffac\013\121\014\124\001\002\000\064" +
    "\004\uffdf\006\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\015\uffdf\017\117\021\uffdf\042\uffdf\043\uffdf\044\uffdf" +
    "\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053" +
    "\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\001\002" +
    "\000\046\011\uffa4\013\uffa4\014\uffa4\042\063\043\065\044" +
    "\072\045\075\046\074\047\070\050\064\051\062\052\071" +
    "\053\067\054\066\055\073\056\076\057\061\060\077\001" +
    "\002\000\126\002\uffae\004\uffae\005\uffae\006\uffae\007\uffae" +
    "\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\015\uffae\020" +
    "\uffae\021\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae" +
    "\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae\036\uffae\037" +
    "\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae" +
    "\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054" +
    "\uffae\055\uffae\056\uffae\057\uffae\060\uffae\001\002\000\004" +
    "\011\060\001\002\000\126\002\uffad\004\uffad\005\uffad\006" +
    "\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad" +
    "\015\uffad\020\uffad\021\uffad\023\uffad\024\uffad\025\uffad\026" +
    "\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad" +
    "\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044" +
    "\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad" +
    "\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad\001" +
    "\002\000\034\004\011\010\051\016\040\020\010\021\041" +
    "\022\042\036\034\043\031\061\037\062\036\063\046\064" +
    "\032\065\044\001\002\000\034\004\011\010\051\016\040" +
    "\020\010\021\041\022\042\036\034\043\031\061\037\062" +
    "\036\063\046\064\032\065\044\001\002\000\034\004\011" +
    "\010\051\016\040\020\010\021\041\022\042\036\034\043" +
    "\031\061\037\062\036\063\046\064\032\065\044\001\002" +
    "\000\034\004\011\010\051\016\040\020\010\021\041\022" +
    "\042\036\034\043\031\061\037\062\036\063\046\064\032" +
    "\065\044\001\002\000\034\004\011\010\051\016\040\020" +
    "\010\021\041\022\042\036\034\043\031\061\037\062\036" +
    "\063\046\064\032\065\044\001\002\000\034\004\011\010" +
    "\051\016\040\020\010\021\041\022\042\036\034\043\031" +
    "\061\037\062\036\063\046\064\032\065\044\001\002\000" +
    "\034\004\011\010\051\016\040\020\010\021\041\022\042" +
    "\036\034\043\031\061\037\062\036\063\046\064\032\065" +
    "\044\001\002\000\034\004\011\010\051\016\040\020\010" +
    "\021\041\022\042\036\034\043\031\061\037\062\036\063" +
    "\046\064\032\065\044\001\002\000\034\004\011\010\051" +
    "\016\040\020\010\021\041\022\042\036\034\043\031\061" +
    "\037\062\036\063\046\064\032\065\044\001\002\000\034" +
    "\004\011\010\051\016\040\020\010\021\041\022\042\036" +
    "\034\043\031\061\037\062\036\063\046\064\032\065\044" +
    "\001\002\000\034\004\011\010\051\016\040\020\010\021" +
    "\041\022\042\036\034\043\031\061\037\062\036\063\046" +
    "\064\032\065\044\001\002\000\034\004\011\010\051\016" +
    "\040\020\010\021\041\022\042\036\034\043\031\061\037" +
    "\062\036\063\046\064\032\065\044\001\002\000\034\004" +
    "\011\010\051\016\040\020\010\021\041\022\042\036\034" +
    "\043\031\061\037\062\036\063\046\064\032\065\044\001" +
    "\002\000\034\004\011\010\051\016\040\020\010\021\041" +
    "\022\042\036\034\043\031\061\037\062\036\063\046\064" +
    "\032\065\044\001\002\000\034\004\011\010\051\016\040" +
    "\020\010\021\041\022\042\036\034\043\031\061\037\062" +
    "\036\063\046\064\032\065\044\001\002\000\114\002\uffc1" +
    "\004\uffc1\005\uffc1\007\uffc1\011\uffc1\013\uffc1\014\uffc1\020" +
    "\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1" +
    "\031\uffc1\032\uffc1\033\uffc1\034\uffc1\036\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\042\uffc1\043\uffc1\044\072\045\075\046\uffc1" +
    "\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055" +
    "\uffc1\056\uffc1\057\uffc1\060\uffc1\001\002\000\114\002\uffc3" +
    "\004\uffc3\005\uffc3\007\uffc3\011\uffc3\013\uffc3\014\uffc3\020" +
    "\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3" +
    "\031\uffc3\032\uffc3\033\uffc3\034\uffc3\036\uffc3\037\uffc3\040" +
    "\uffc3\041\uffc3\042\uffc3\043\uffc3\044\072\045\075\046\uffc3" +
    "\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055" +
    "\uffc3\056\uffc3\057\uffc3\060\uffc3\001\002\000\114\002\uffcc" +
    "\004\uffcc\005\uffcc\007\uffcc\011\uffcc\013\uffcc\014\uffcc\020" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\032\uffcc\033\uffcc\034\uffcc\036\uffcc\037\uffcc\040" +
    "\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc" +
    "\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055" +
    "\uffcc\056\uffcc\057\uffcc\060\uffcc\001\002\000\114\002\uffcb" +
    "\004\uffcb\005\uffcb\007\uffcb\011\uffcb\013\uffcb\014\uffcb\020" +
    "\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\032\uffcb\033\uffcb\034\uffcb\036\uffcb\037\uffcb\040" +
    "\uffcb\041\uffcb\042\uffcb\043\uffcb\044\072\045\075\046\uffcb" +
    "\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055" +
    "\uffcb\056\uffcb\057\uffcb\060\uffcb\001\002\000\114\002\uffc4" +
    "\004\uffc4\005\uffc4\007\uffc4\011\uffc4\013\uffc4\014\uffc4\020" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4" +
    "\031\uffc4\032\uffc4\033\uffc4\034\uffc4\036\uffc4\037\uffc4\040" +
    "\uffc4\041\uffc4\042\uffc4\043\uffc4\044\072\045\075\046\uffc4" +
    "\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055" +
    "\uffc4\056\uffc4\057\uffc4\060\uffc4\001\002\000\114\002\uffcf" +
    "\004\uffcf\005\uffcf\007\uffcf\011\uffcf\013\uffcf\014\uffcf\020" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\034\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf" +
    "\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055" +
    "\uffcf\056\uffcf\057\uffcf\060\uffcf\001\002\000\114\002\uffc7" +
    "\004\uffc7\005\uffc7\007\uffc7\011\uffc7\013\uffc7\014\uffc7\020" +
    "\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7" +
    "\031\uffc7\032\uffc7\033\uffc7\034\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\043\uffc7\044\072\045\075\046\uffc7" +
    "\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055" +
    "\uffc7\056\uffc7\057\uffc7\060\uffc7\001\002\000\114\002\uffca" +
    "\004\uffca\005\uffca\007\uffca\011\uffca\013\uffca\014\uffca\020" +
    "\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\036\uffca\037\uffca\040" +
    "\uffca\041\uffca\042\uffca\043\uffca\044\072\045\075\046\uffca" +
    "\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055" +
    "\uffca\056\uffca\057\uffca\060\uffca\001\002\000\114\002\uffc6" +
    "\004\uffc6\005\uffc6\007\uffc6\011\uffc6\013\uffc6\014\uffc6\020" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\034\uffc6\036\uffc6\037\uffc6\040" +
    "\uffc6\041\uffc6\042\uffc6\043\uffc6\044\072\045\075\046\uffc6" +
    "\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055" +
    "\uffc6\056\uffc6\057\uffc6\060\uffc6\001\002\000\114\002\uffc5" +
    "\004\uffc5\005\uffc5\007\uffc5\011\uffc5\013\uffc5\014\uffc5\020" +
    "\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5" +
    "\031\uffc5\032\uffc5\033\uffc5\034\uffc5\036\uffc5\037\uffc5\040" +
    "\uffc5\041\uffc5\042\uffc5\043\uffc5\044\072\045\075\046\uffc5" +
    "\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055" +
    "\uffc5\056\uffc5\057\uffc5\060\uffc5\001\002\000\114\002\uffcd" +
    "\004\uffcd\005\uffcd\007\uffcd\011\uffcd\013\uffcd\014\uffcd\020" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd" +
    "\031\uffcd\032\uffcd\033\uffcd\034\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\041\uffcd\042\uffcd\043\uffcd\044\072\045\075\046\uffcd" +
    "\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055" +
    "\uffcd\056\uffcd\057\uffcd\060\uffcd\001\002\000\114\002\uffc9" +
    "\004\uffc9\005\uffc9\007\uffc9\011\uffc9\013\uffc9\014\uffc9\020" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9" +
    "\031\uffc9\032\uffc9\033\uffc9\034\uffc9\036\uffc9\037\uffc9\040" +
    "\uffc9\041\uffc9\042\uffc9\043\uffc9\044\072\045\075\046\uffc9" +
    "\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055" +
    "\uffc9\056\uffc9\057\uffc9\060\uffc9\001\002\000\114\002\uffce" +
    "\004\uffce\005\uffce\007\uffce\011\uffce\013\uffce\014\uffce\020" +
    "\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce" +
    "\031\uffce\032\uffce\033\uffce\034\uffce\036\uffce\037\uffce\040" +
    "\uffce\041\uffce\042\uffce\043\uffce\044\072\045\075\046\uffce" +
    "\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055" +
    "\uffce\056\uffce\057\uffce\060\uffce\001\002\000\114\002\uffc8" +
    "\004\uffc8\005\uffc8\007\uffc8\011\uffc8\013\uffc8\014\uffc8\020" +
    "\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\036\uffc8\037\uffc8\040" +
    "\uffc8\041\uffc8\042\uffc8\043\uffc8\044\072\045\075\046\uffc8" +
    "\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055" +
    "\uffc8\056\uffc8\057\uffc8\060\uffc8\001\002\000\114\002\uffc2" +
    "\004\uffc2\005\uffc2\007\uffc2\011\uffc2\013\uffc2\014\uffc2\020" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\034\uffc2\036\uffc2\037\uffc2\040" +
    "\uffc2\041\uffc2\042\uffc2\043\uffc2\044\072\045\075\046\uffc2" +
    "\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055" +
    "\uffc2\056\uffc2\057\uffc2\060\uffc2\001\002\000\034\004\011" +
    "\010\051\016\040\020\010\021\041\022\042\036\034\043" +
    "\031\061\037\062\036\063\046\064\032\065\044\001\002" +
    "\000\046\011\uffa5\013\uffa5\014\uffa5\042\063\043\065\044" +
    "\072\045\075\046\074\047\070\050\064\051\062\052\071" +
    "\053\067\054\066\055\073\056\076\057\061\060\077\001" +
    "\002\000\040\004\uffa2\006\uffa2\010\uffa2\011\uffa2\016\uffa2" +
    "\020\uffa2\021\uffa2\022\uffa2\036\uffa2\043\uffa2\061\uffa2\062" +
    "\uffa2\063\uffa2\064\uffa2\065\uffa2\001\002\000\004\011\uffaa" +
    "\001\002\000\040\004\011\006\052\010\051\011\uffab\016" +
    "\040\020\054\021\041\022\042\036\034\043\031\061\037" +
    "\062\036\063\046\064\032\065\044\001\002\000\040\004" +
    "\uffa3\006\uffa3\010\uffa3\011\uffa3\016\uffa3\020\uffa3\021\uffa3" +
    "\022\uffa3\036\uffa3\043\uffa3\061\uffa3\062\uffa3\063\uffa3\064" +
    "\uffa3\065\uffa3\001\002\000\010\011\uffa9\013\121\014\124" +
    "\001\002\000\004\011\uffa8\001\002\000\040\004\011\006" +
    "\052\010\051\011\uffa7\016\040\020\054\021\041\022\042" +
    "\036\034\043\031\061\037\062\036\063\046\064\032\065" +
    "\044\001\002\000\042\007\131\042\063\043\065\044\072" +
    "\045\075\046\074\047\070\050\064\051\062\052\071\053" +
    "\067\054\066\055\073\056\076\057\061\060\077\001\002" +
    "\000\004\017\132\001\002\000\034\004\011\010\051\016" +
    "\040\020\010\021\041\022\042\036\034\043\031\061\037" +
    "\062\036\063\046\064\032\065\044\001\002\000\046\011" +
    "\uffa6\013\uffa6\014\uffa6\042\063\043\065\044\072\045\075" +
    "\046\074\047\070\050\064\051\062\052\071\053\067\054" +
    "\066\055\073\056\076\057\061\060\077\001\002\000\126" +
    "\002\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011" +
    "\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\020\uffb5\021\uffb5" +
    "\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031" +
    "\uffb5\032\uffb5\033\uffb5\034\uffb5\036\uffb5\037\uffb5\040\uffb5" +
    "\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047" +
    "\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5" +
    "\056\uffb5\057\uffb5\060\uffb5\001\002\000\034\004\011\010" +
    "\051\016\040\020\010\021\041\022\042\036\034\043\031" +
    "\061\037\062\036\063\046\064\032\065\044\001\002\000" +
    "\126\002\uffba\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba" +
    "\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba\020\uffba\021" +
    "\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba" +
    "\031\uffba\032\uffba\033\uffba\034\uffba\036\uffba\037\uffba\040" +
    "\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba" +
    "\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055" +
    "\uffba\056\uffba\057\uffba\060\uffba\001\002\000\004\020\152" +
    "\001\002\000\036\004\011\005\144\010\051\016\040\020" +
    "\010\021\041\022\042\036\034\043\031\061\037\062\036" +
    "\063\046\064\032\065\044\001\002\000\004\020\143\001" +
    "\002\000\126\002\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6" +
    "\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\020" +
    "\uffb6\021\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6" +
    "\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\036\uffb6\037" +
    "\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6" +
    "\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054" +
    "\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\001\002\000\130" +
    "\002\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011" +
    "\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\017\uffdd\020\uffdd" +
    "\021\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\036\uffdd\037\uffdd" +
    "\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046" +
    "\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd" +
    "\055\uffdd\056\uffdd\057\uffdd\060\uffdd\001\002\000\126\002" +
    "\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7" +
    "\012\uffb7\013\uffb7\014\uffb7\015\uffb7\020\uffb7\021\uffb7\023" +
    "\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7" +
    "\032\uffb7\033\uffb7\034\uffb7\036\uffb7\037\uffb7\040\uffb7\041" +
    "\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7" +
    "\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056" +
    "\uffb7\057\uffb7\060\uffb7\001\002\000\004\005\151\001\002" +
    "\000\106\002\uffda\004\uffda\005\uffda\013\uffda\014\147\020" +
    "\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda" +
    "\032\uffda\033\uffda\034\uffda\036\uffda\037\uffda\040\uffda\041" +
    "\uffda\042\063\043\065\044\072\045\075\046\074\047\070" +
    "\050\064\051\062\052\071\053\067\054\066\055\073\056" +
    "\076\057\061\060\077\001\002\000\034\004\011\010\051" +
    "\016\040\020\010\021\041\022\042\036\034\043\031\061" +
    "\037\062\036\063\046\064\032\065\044\001\002\000\046" +
    "\002\uffd9\004\uffd9\005\uffd9\013\uffd9\020\uffd9\023\uffd9\024" +
    "\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\032\uffd9\033\uffd9" +
    "\034\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\001\002\000" +
    "\126\002\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\020\uffb8\021" +
    "\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8" +
    "\031\uffb8\032\uffb8\033\uffb8\034\uffb8\036\uffb8\037\uffb8\040" +
    "\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8" +
    "\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055" +
    "\uffb8\056\uffb8\057\uffb8\060\uffb8\001\002\000\010\004\140" +
    "\010\051\021\134\001\002\000\126\002\uffb9\004\uffb9\005" +
    "\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9" +
    "\014\uffb9\015\uffb9\020\uffb9\021\uffb9\023\uffb9\024\uffb9\025" +
    "\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9" +
    "\034\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043" +
    "\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060" +
    "\uffb9\001\002\000\042\007\155\042\063\043\065\044\072" +
    "\045\075\046\074\047\070\050\064\051\062\052\071\053" +
    "\067\054\066\055\073\056\076\057\061\060\077\001\002" +
    "\000\130\002\uffde\004\uffde\005\uffde\006\uffde\007\uffde\010" +
    "\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\017\uffde" +
    "\020\uffde\021\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\036\uffde" +
    "\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045" +
    "\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde" +
    "\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde\001\002\000" +
    "\114\002\uffbe\004\uffbe\005\uffbe\007\uffbe\011\uffbe\013\uffbe" +
    "\014\uffbe\020\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027" +
    "\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\036\uffbe" +
    "\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\072\045" +
    "\075\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe" +
    "\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\001\002\000" +
    "\010\005\161\016\163\020\162\001\002\000\114\002\uffb4" +
    "\004\uffb4\005\uffb4\007\uffb4\011\uffb4\013\uffb4\014\uffb4\020" +
    "\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4" +
    "\031\uffb4\032\uffb4\033\uffb4\034\uffb4\036\uffb4\037\uffb4\040" +
    "\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4" +
    "\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055" +
    "\uffb4\056\uffb4\057\uffb4\060\uffb4\001\002\000\030\004\011" +
    "\020\010\023\015\025\004\026\025\030\013\034\023\036" +
    "\012\037\006\040\007\041\017\001\002\000\006\005\uffb1" +
    "\014\170\001\002\000\004\005\uffaf\001\002\000\004\005" +
    "\165\001\002\000\030\004\011\020\010\023\015\025\004" +
    "\026\025\030\013\034\023\036\012\037\006\040\007\041" +
    "\017\001\002\000\004\024\167\001\002\000\114\002\uffb2" +
    "\004\uffb2\005\uffb2\007\uffb2\011\uffb2\013\uffb2\014\uffb2\020" +
    "\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2" +
    "\031\uffb2\032\uffb2\033\uffb2\034\uffb2\036\uffb2\037\uffb2\040" +
    "\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2" +
    "\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055" +
    "\uffb2\056\uffb2\057\uffb2\060\uffb2\001\002\000\006\016\163" +
    "\020\162\001\002\000\004\005\uffb0\001\002\000\004\024" +
    "\173\001\002\000\114\002\uffb3\004\uffb3\005\uffb3\007\uffb3" +
    "\011\uffb3\013\uffb3\014\uffb3\020\uffb3\023\uffb3\024\uffb3\025" +
    "\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3" +
    "\034\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043" +
    "\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3" +
    "\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060" +
    "\uffb3\001\002\000\114\002\uffbf\004\uffbf\005\uffbf\007\uffbf" +
    "\011\uffbf\013\uffbf\014\uffbf\020\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf" +
    "\034\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043" +
    "\uffbf\044\072\045\075\046\uffbf\047\uffbf\050\uffbf\051\uffbf" +
    "\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060" +
    "\uffbf\001\002\000\114\002\uffc0\004\uffc0\005\uffc0\007\uffc0" +
    "\011\uffc0\013\uffc0\014\uffc0\020\uffc0\023\uffc0\024\uffc0\025" +
    "\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0" +
    "\034\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043" +
    "\uffc0\044\072\045\075\046\uffc0\047\uffc0\050\uffc0\051\uffc0" +
    "\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060" +
    "\uffc0\001\002\000\034\004\011\010\051\016\040\020\010" +
    "\021\041\022\042\036\034\043\031\061\037\062\036\063" +
    "\046\064\032\065\044\001\002\000\044\002\ufff9\004\ufff9" +
    "\013\ufff9\020\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027" +
    "\ufff9\030\ufff9\032\ufff9\033\ufff9\034\ufff9\036\ufff9\037\ufff9" +
    "\040\ufff9\041\ufff9\001\002\000\004\035\221\001\002\000" +
    "\010\014\203\017\202\035\uffdc\001\002\000\034\004\011" +
    "\010\051\016\040\020\010\021\041\022\042\036\034\043" +
    "\031\061\037\062\036\063\046\064\032\065\044\001\002" +
    "\000\004\020\205\001\002\000\050\002\uffdb\004\uffdb\013" +
    "\uffdb\017\uffdb\020\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036" +
    "\uffdb\037\uffdb\040\uffdb\041\uffdb\001\002\000\052\002\uffdc" +
    "\004\uffdc\013\uffdc\014\203\017\uffdc\020\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\001" +
    "\002\000\042\014\207\042\063\043\065\044\072\045\075" +
    "\046\074\047\070\050\064\051\062\052\071\053\067\054" +
    "\066\055\073\056\076\057\061\060\077\001\002\000\034" +
    "\004\011\010\051\016\040\020\010\021\041\022\042\036" +
    "\034\043\031\061\037\062\036\063\046\064\032\065\044" +
    "\001\002\000\044\014\211\023\212\042\063\043\065\044" +
    "\072\045\075\046\074\047\070\050\064\051\062\052\071" +
    "\053\067\054\066\055\073\056\076\057\061\060\077\001" +
    "\002\000\034\004\011\010\051\016\040\020\010\021\041" +
    "\022\042\036\034\043\031\061\037\062\036\063\046\064" +
    "\032\065\044\001\002\000\030\004\011\020\010\023\015" +
    "\025\004\026\025\030\013\034\023\036\012\037\006\040" +
    "\007\041\017\001\002\000\004\024\214\001\002\000\044" +
    "\002\ufff1\004\ufff1\013\ufff1\020\ufff1\023\ufff1\024\ufff1\025" +
    "\ufff1\026\ufff1\027\ufff1\030\ufff1\032\ufff1\033\ufff1\034\ufff1" +
    "\036\ufff1\037\ufff1\040\ufff1\041\ufff1\001\002\000\042\023" +
    "\216\042\063\043\065\044\072\045\075\046\074\047\070" +
    "\050\064\051\062\052\071\053\067\054\066\055\073\056" +
    "\076\057\061\060\077\001\002\000\030\004\011\020\010" +
    "\023\015\025\004\026\025\030\013\034\023\036\012\037" +
    "\006\040\007\041\017\001\002\000\004\024\220\001\002" +
    "\000\044\002\ufff0\004\ufff0\013\ufff0\020\ufff0\023\ufff0\024" +
    "\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\032\ufff0\033\ufff0" +
    "\034\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\001\002\000" +
    "\034\004\011\010\051\016\040\020\010\021\041\022\042" +
    "\036\034\043\031\061\037\062\036\063\046\064\032\065" +
    "\044\001\002\000\004\023\223\001\002\000\030\004\011" +
    "\020\010\023\015\025\004\026\025\030\013\034\023\036" +
    "\012\037\006\040\007\041\017\001\002\000\004\024\225" +
    "\001\002\000\044\002\uffef\004\uffef\013\uffef\020\uffef\023" +
    "\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\032\uffef" +
    "\033\uffef\034\uffef\036\uffef\037\uffef\040\uffef\041\uffef\001" +
    "\002\000\006\004\011\020\010\001\002\000\004\017\uffe0" +
    "\001\002\000\014\002\ufffe\024\ufffe\027\ufffe\032\ufffe\033" +
    "\ufffe\001\002\000\042\002\uffff\004\011\020\010\023\015" +
    "\024\uffff\025\004\026\025\027\uffff\030\013\032\uffff\033" +
    "\uffff\034\023\036\012\037\006\040\007\041\017\001\002" +
    "\000\014\002\ufffd\024\ufffd\027\ufffd\032\ufffd\033\ufffd\001" +
    "\002\000\004\024\234\001\002\000\044\002\ufff7\004\ufff7" +
    "\013\ufff7\020\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027" +
    "\ufff7\030\ufff7\032\ufff7\033\ufff7\034\ufff7\036\ufff7\037\ufff7" +
    "\040\ufff7\041\ufff7\001\002\000\004\002\001\001\002\000" +
    "\042\031\237\042\063\043\065\044\072\045\075\046\074" +
    "\047\070\050\064\051\062\052\071\053\067\054\066\055" +
    "\073\056\076\057\061\060\077\001\002\000\030\004\011" +
    "\020\010\023\015\025\004\026\025\030\013\034\023\036" +
    "\012\037\006\040\007\041\017\001\002\000\010\024\244" +
    "\032\242\033\241\001\002\000\030\004\011\020\010\023" +
    "\015\025\004\026\025\030\013\034\023\036\012\037\006" +
    "\040\007\041\017\001\002\000\034\004\011\010\051\016" +
    "\040\020\010\021\041\022\042\036\034\043\031\061\037" +
    "\062\036\063\046\064\032\065\044\001\002\000\004\024" +
    "\245\001\002\000\044\002\ufff4\004\ufff4\013\ufff4\020\ufff4" +
    "\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\032" +
    "\ufff4\033\ufff4\034\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4" +
    "\001\002\000\044\002\ufff2\004\ufff2\013\ufff2\020\ufff2\023" +
    "\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\032\ufff2" +
    "\033\ufff2\034\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\001" +
    "\002\000\042\031\247\042\063\043\065\044\072\045\075" +
    "\046\074\047\070\050\064\051\062\052\071\053\067\054" +
    "\066\055\073\056\076\057\061\060\077\001\002\000\030" +
    "\004\011\020\010\023\015\025\004\026\025\030\013\034" +
    "\023\036\012\037\006\040\007\041\017\001\002\000\010" +
    "\024\uffea\032\242\033\251\001\002\000\030\004\011\020" +
    "\010\023\015\025\004\026\025\030\013\034\023\036\012" +
    "\037\006\040\007\041\017\001\002\000\004\024\uffe9\001" +
    "\002\000\004\024\uffe8\001\002\000\004\024\255\001\002" +
    "\000\044\002\ufff3\004\ufff3\013\ufff3\020\ufff3\023\ufff3\024" +
    "\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\032\ufff3\033\ufff3" +
    "\034\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\001\002\000" +
    "\006\004\157\015\262\001\002\000\010\004\uffe4\012\260" +
    "\015\uffe4\001\002\000\004\020\257\001\002\000\006\004" +
    "\uffe3\015\262\001\002\000\004\020\263\001\002\000\006" +
    "\004\uffe2\015\uffe2\001\002\000\044\002\uffee\004\uffee\013" +
    "\uffee\020\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee" +
    "\030\uffee\032\uffee\033\uffee\034\uffee\036\uffee\037\uffee\040" +
    "\uffee\041\uffee\001\002\000\042\005\266\042\063\043\065" +
    "\044\072\045\075\046\074\047\070\050\064\051\062\052" +
    "\071\053\067\054\066\055\073\056\076\057\061\060\077" +
    "\001\002\000\126\002\uffbb\004\uffbb\005\uffbb\006\uffbb\007" +
    "\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb" +
    "\020\uffbb\021\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027" +
    "\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\036\uffbb" +
    "\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045" +
    "\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb" +
    "\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\001\002\000" +
    "\016\002\uffe7\013\uffe7\024\uffe7\027\uffe7\032\uffe7\033\uffe7" +
    "\001\002\000\046\002\uffec\004\uffec\013\uffec\017\274\020" +
    "\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec" +
    "\032\uffec\033\uffec\034\uffec\036\uffec\037\uffec\040\uffec\041" +
    "\uffec\001\002\000\004\020\272\001\002\000\004\004\157" +
    "\001\002\000\044\002\uffed\004\uffed\013\uffed\020\uffed\023" +
    "\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\032\uffed" +
    "\033\uffed\034\uffed\036\uffed\037\uffed\040\uffed\041\uffed\001" +
    "\002\000\034\004\011\010\051\016\040\020\010\021\041" +
    "\022\042\036\034\043\031\061\037\062\036\063\046\064" +
    "\032\065\044\001\002\000\044\002\uffeb\004\uffeb\013\uffeb" +
    "\020\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\032\uffeb\033\uffeb\034\uffeb\036\uffeb\037\uffeb\040\uffeb" +
    "\041\uffeb\001\002\000\014\002\ufffb\024\ufffb\027\ufffb\032" +
    "\ufffb\033\ufffb\001\002\000\042\023\300\042\063\043\065" +
    "\044\072\045\075\046\074\047\070\050\064\051\062\052" +
    "\071\053\067\054\066\055\073\056\076\057\061\060\077" +
    "\001\002\000\030\004\011\020\010\023\015\025\004\026" +
    "\025\030\013\034\023\036\012\037\006\040\007\041\017" +
    "\001\002\000\004\024\302\001\002\000\044\002\ufff6\004" +
    "\ufff6\013\ufff6\020\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\027\ufff6\030\ufff6\032\ufff6\033\ufff6\034\ufff6\036\ufff6\037" +
    "\ufff6\040\ufff6\041\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\020\002\013\003\020\004\004\006\023\010" +
    "\015\016\021\017\017\001\001\000\016\010\042\011\276" +
    "\013\032\016\047\017\046\020\044\001\001\000\002\001" +
    "\001\000\004\012\267\001\001\000\020\007\266\010\042" +
    "\011\145\013\032\016\047\017\046\020\044\001\001\000" +
    "\002\001\001\000\016\010\042\011\264\013\032\016\047" +
    "\017\046\020\044\001\001\000\004\014\255\001\001\000" +
    "\016\010\042\011\235\013\032\016\047\017\046\020\044" +
    "\001\001\000\002\001\001\000\022\002\026\003\020\004" +
    "\004\005\232\006\023\010\015\016\021\017\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\141\021" +
    "\135\001\001\000\020\002\227\003\020\004\004\006\023" +
    "\010\015\016\021\017\017\001\001\000\002\001\001\000" +
    "\004\012\177\001\001\000\002\001\001\000\022\002\026" +
    "\003\020\004\004\005\025\006\023\010\015\016\021\017" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\010\042\011\034\013\032\016\047\017\046\020\044\001" +
    "\001\000\016\010\042\011\174\013\032\016\047\017\046" +
    "\020\044\001\001\000\016\010\042\011\173\013\032\016" +
    "\047\017\046\020\044\001\001\000\002\001\001\000\004" +
    "\015\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\010\042\011\155\013" +
    "\032\016\047\017\046\020\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\141\021\135\001\001\000" +
    "\002\001\001\000\022\010\042\011\054\013\032\016\047" +
    "\017\046\020\044\023\056\024\052\001\001\000\016\010" +
    "\042\011\127\013\032\016\047\017\046\020\044\001\001" +
    "\000\006\025\122\027\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\010\042\011\115\013\032\016\047\017" +
    "\046\020\044\001\001\000\016\010\042\011\114\013\032" +
    "\016\047\017\046\020\044\001\001\000\016\010\042\011" +
    "\113\013\032\016\047\017\046\020\044\001\001\000\016" +
    "\010\042\011\112\013\032\016\047\017\046\020\044\001" +
    "\001\000\016\010\042\011\111\013\032\016\047\017\046" +
    "\020\044\001\001\000\016\010\042\011\110\013\032\016" +
    "\047\017\046\020\044\001\001\000\016\010\042\011\107" +
    "\013\032\016\047\017\046\020\044\001\001\000\016\010" +
    "\042\011\106\013\032\016\047\017\046\020\044\001\001" +
    "\000\016\010\042\011\105\013\032\016\047\017\046\020" +
    "\044\001\001\000\016\010\042\011\104\013\032\016\047" +
    "\017\046\020\044\001\001\000\016\010\042\011\103\013" +
    "\032\016\047\017\046\020\044\001\001\000\016\010\042" +
    "\011\102\013\032\016\047\017\046\020\044\001\001\000" +
    "\016\010\042\011\101\013\032\016\047\017\046\020\044" +
    "\001\001\000\016\010\042\011\100\013\032\016\047\017" +
    "\046\020\044\001\001\000\016\010\042\011\077\013\032" +
    "\016\047\017\046\020\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\010\042\011\117\013\032\016\047" +
    "\017\046\020\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\010\042\011\054\013\032" +
    "\016\047\017\046\020\044\024\124\001\001\000\002\001" +
    "\001\000\006\025\126\027\125\001\001\000\002\001\001" +
    "\000\020\010\042\011\054\013\032\016\047\017\046\020" +
    "\044\024\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\010\042\011\132\013\032\016\047\017\046\020" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\010\042\011\153\013\032\016\047\017\046\020\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\007\144" +
    "\010\042\011\145\013\032\016\047\017\046\020\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\007\147\010\042\011\145\013\032\016\047\017\046" +
    "\020\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\141\021\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\163\001\001\000\002\001\001\000\022\002\026\003\020" +
    "\004\004\005\171\006\023\010\015\016\021\017\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\002\026\003\020\004\004\005\165\006\023\010" +
    "\015\016\021\017\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\007\176\010\042\011\145\013\032\016" +
    "\047\017\046\020\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\010\042\011\205\013" +
    "\032\016\047\017\046\020\044\001\001\000\004\012\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\010\042\011\207\013\032\016\047\017\046" +
    "\020\044\001\001\000\002\001\001\000\016\010\042\011" +
    "\214\013\032\016\047\017\046\020\044\001\001\000\022" +
    "\002\026\003\020\004\004\005\212\006\023\010\015\016" +
    "\021\017\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\002\026\003\020\004\004\005" +
    "\216\006\023\010\015\016\021\017\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\007\221\010\042\011" +
    "\145\013\032\016\047\017\046\020\044\001\001\000\002" +
    "\001\001\000\022\002\026\003\020\004\004\005\223\006" +
    "\023\010\015\016\021\017\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\226\010\042\016\021\017" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\002\231\003\020\004\004\006\023\010\015\016\021\017" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\002" +
    "\026\003\020\004\004\005\237\006\023\010\015\016\021" +
    "\017\017\001\001\000\004\026\242\001\001\000\022\002" +
    "\026\003\020\004\004\005\253\006\023\010\015\016\021" +
    "\017\017\001\001\000\016\010\042\011\245\013\032\016" +
    "\047\017\046\020\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\002" +
    "\026\003\020\004\004\005\247\006\023\010\015\016\021" +
    "\017\017\001\001\000\004\026\251\001\001\000\022\002" +
    "\026\003\020\004\004\005\252\006\023\010\015\016\021" +
    "\017\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\263\001\001" +
    "\000\002\001\001\000\004\014\260\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\272\001\001" +
    "\000\002\001\001\000\020\007\274\010\042\011\145\013" +
    "\032\016\047\017\046\020\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\002\026\003" +
    "\020\004\004\005\300\006\023\010\015\016\021\017\017" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalisadorSintatico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalisadorSintatico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalisadorSintatico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info)  {
        System.out.println("Warning - " + message);
    }

    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message);
        System.exit(-1);
    }

	public void syntax_error(Symbol cur_token) {
		System.out.println("Syntax Error - " + ((LUAToken)cur_token.value).value);
		System.out.println("Syntax Error - " + ((LUAToken)cur_token.value).start);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalisadorSintatico$actions {
  private final AnalisadorSintatico parser;

  /** Constructor */
  CUP$AnalisadorSintatico$actions(AnalisadorSintatico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalisadorSintatico$do_action(
    int                        CUP$AnalisadorSintatico$act_num,
    java_cup.runtime.lr_parser CUP$AnalisadorSintatico$parser,
    java.util.Stack            CUP$AnalisadorSintatico$stack,
    int                        CUP$AnalisadorSintatico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalisadorSintatico$result;

      /* select the action based on the action number */
      switch (CUP$AnalisadorSintatico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // fieldsep ::= PVIRGULA 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = null; RESULT = new Node("fieldsep",k);  
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("fieldsep",19, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // fieldsep ::= VIRGULA 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = null; RESULT = new Node("fieldsep",k);  
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("fieldsep",19, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // field ::= exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = n1;  
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("field",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // field ::= NAME ATRIBUICAO exp 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
        	Node var = new Node(t1,SymTable.getVar(t1.value));
        	String code = "{0}"+ var.result + " := " + n1.result;
        	RESULT = new Node("field",n1,code); 
        
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("field",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // field ::= ACOL exp FCOL ATRIBUICAO exp 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
			Node[] k = {new Node(t1),n1,new Node(t2),new Node(t3),n2}; 
			RESULT = new Node("field",k); 
		
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("field",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // fieldlist2 ::= fieldsep field fieldsep 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n3 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,n2,n3}; RESULT = new Node("fieldlist2",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("fieldlist2",21, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // fieldlist2 ::= fieldsep field fieldlist2 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n3 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,n2,n3}; RESULT = new Node("fieldlist2",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("fieldlist2",21, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // fieldlist2 ::= fieldsep field 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,n2}; RESULT = new Node("fieldlist2",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("fieldlist2",21, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // fieldlist ::= field fieldlist2 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
            	Node[] k = {n1,n2}; 
            	RESULT = new Node("fieldlist",k); 
            
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("fieldlist",17, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // fieldlist ::= field fieldsep 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
				Node[] k = {n1,n2}; 
				RESULT = new Node("fieldlist",k); 
			
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("fieldlist",17, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // fieldlist ::= field 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
				RESULT = n1;
			
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("fieldlist",17, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // tableconstructor ::= ACHA fieldlist FCHA 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
				   		RESULT = n1; 
				   
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("tableconstructor",14, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tableconstructor ::= ACHA FCHA 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
						Node[] k = {new Node(t1),new Node(t2)}; 
						RESULT = new Node("tableconstructor",k); 
					
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("tableconstructor",14, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // parlist ::= PONTOS3 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
		  		RESULT = new Node("parlist",new Node(t1));  
		   
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("parlist",16, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // parlist ::= NAME VIRGULA parlist 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
           	Node n = new Node(t1,SymTable.getVar(t1.value));
           	Node[] k = {n,n1}; 
           	RESULT = new Node("parlist",k,"",n.result + "," + n1.result); 
           
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("parlist",16, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // parlist ::= NAME 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
		 	RESULT = new Node(t,SymTable.getVar(t.value));
		   
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("parlist",16, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // funcbody ::= APAR parlist FPAR block END 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
				String[] pars = n1.result.split(",");
				String code = "{0}";
				for(int i=0;i<pars.length;i++) code += "param"+(i+1)+" := " + pars[i] + "\n";		
				code += "{1}";	
				Node[] k = {n1,n2}; 
				RESULT = new Node("funcbody",k,code); 
			
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("funcbody",11, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // funcbody ::= APAR FPAR block END 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
				RESULT = n2;
			
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("funcbody",11, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // function ::= FUNCTION funcbody 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
				Node[] k = {new Node(t1),n1}; 
				RESULT = new Node("function",k,""); 
			
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("function",9, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // args ::= STRING 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
       		RESULT = new Node(t1);  
       
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("args",15, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // args ::= tableconstructor 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
       		RESULT = n1; 
       
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("args",15, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // args ::= APAR FPAR 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
       		Node[] k = null;
       		RESULT = new Node("args",k); 
       
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("args",15, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // args ::= APAR explist FPAR 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
			String[] exps = n1.result.split(",");
			String code = "{0}";
			for(int i=0;i<exps.length;i++) code += "param"+(i+1)+" := " + exps[i] + "\n";			
			RESULT = new Node("args",n1,code,"" + exps.length); 
		
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("args",15, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // functioncall ::= prefixexp DPONTOS NAME args 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
              		Node n = new Node(t2);
              		Node[] k = {n1,n,n2}; 
              		RESULT = new Node("functioncall",k,"{1}goto "+n.result+"\n",n.result); 
              
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("functioncall",6, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // functioncall ::= prefixexp args 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
			  		Node[] k = {n1,n2}; 
			  		RESULT = new Node("functioncall",k,"{1}goto "+n1.token.value+"\n",n1.result); 
			  
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("functioncall",6, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // prefixexp ::= APAR exp FPAR 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
            	RESULT = n1;
            
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("prefixexp",13, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // prefixexp ::= functioncall 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
            	RESULT = n1;
            
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("prefixexp",13, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // prefixexp ::= var 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
				RESULT = n1;
			
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("prefixexp",13, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exp ::= TRALHA exp 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
      	String tvar = SymTable.getTempVar();
      	String code = "{0}"+tvar+" := - "+ n1.result + "\n"; 
      	RESULT = new Node("exp",n1,code,tvar); 
      
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exp ::= NOT exp 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
      	String tvar = SymTable.getTempVar();
      	String code = "{0}"+tvar+" := - "+ n1.result + "\n"; 
      	RESULT = new Node("exp",n1,code,tvar); 
      
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp ::= MENOS exp 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
      	String tvar = SymTable.getTempVar();
      	String code = "{0}"+tvar+" := - "+ n1.result + "\n"; 
      	RESULT = new Node("exp",n1,code,tvar); 
      
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp ::= exp OR exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
		Node[] k = {n1,n2}; 
      	String tvar = SymTable.getTempVar();
      	String code = "{0}{1}"+tvar+" := "+n1.result+" v "+ n2.result + "\n";
      	RESULT = new Node("OR",k,code,tvar); 
      
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= exp AND exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
      	Node[] k = {n1,n2}; 
      	String tvar = SymTable.getTempVar();
      	String code = "{0}{1}"+tvar+" := "+n1.result+" ^ "+ n2.result + "\n";
      	RESULT = new Node("AND",k,code,tvar); 
      
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= exp DIFERENTE exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
      	Node[] k = {n1,n2}; 
      	String tvar = SymTable.getTempVar();
      	String code = "{0}{1}"+tvar+" := "+n1.result+" ~= "+ n2.result + "\n";
      	RESULT = new Node("~=",k,code,tvar); 
      
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= exp IGUAL exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
      	Node[] k = {n1,n2}; 
      	String tvar = SymTable.getTempVar();
      	String code = "{0}{1}"+tvar+" := "+n1.result+" == "+ n2.result + "\n";
      	RESULT = new Node("==",k,code,tvar); 
      
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= exp MAIOR exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
		Node[] k = {n1,n2}; 
      	String tvar = SymTable.getTempVar();
      	String code = "{0}{1}"+tvar+" := "+n1.result+" > "+ n2.result + "\n";
      	RESULT = new Node(">",k,code,tvar); 
      
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= exp MENOR exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
      	Node[] k = {n1,n2}; 
      	String tvar = SymTable.getTempVar();
      	String code = "{0}{1}"+tvar+" := "+n1.result+" < "+ n2.result + "\n";
      	RESULT = new Node("<",k,code,tvar); 
      
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= exp MAIORIGUAL exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
      	Node[] k = {n1,n2}; 
      	String tvar = SymTable.getTempVar();
      	String code = "{0}{1}"+tvar+" := "+n1.result+" >= "+ n2.result + "\n";
      	RESULT = new Node(">=",k,code,tvar); 
      
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= exp MENORIGUAL exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
      	Node[] k = {n1,n2}; 
      	String tvar = SymTable.getTempVar();
      	String code = "{0}{1}"+tvar+" := "+n1.result+" =< "+ n2.result + "\n";
      	RESULT = new Node("=<",k,code,tvar); 
      
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= exp PONTOS2 exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
      	Node[] k = {n1,n2}; 
      	String tvar = SymTable.getTempVar();
      	String code = "{0}{1}"+tvar+" := "+n1.result+" .. "+ n2.result + "\n";
      	RESULT = new Node("..",k,code,tvar); 
      
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= exp RESTO exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
      	Node[] k = {n1,n2}; 
      	String tvar = SymTable.getTempVar();
      	String code = "{0}{1}"+tvar+" := "+n1.result+" % "+ n2.result + "\n";
      	RESULT = new Node("%",k,code,tvar); 
      
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= exp EXPOENTE exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
      	Node[] k = {n1,n2}; 
      	String tvar = SymTable.getTempVar();
      	String code = "{0}{1}"+tvar+" := "+n1.result+" e"+ n2.result + "\n";
      	RESULT = new Node("e",k,code,tvar); 
      
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp DIVISAO exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
      	Node[] k = {n1,n2}; 
      	String tvar = SymTable.getTempVar();
      	String code = "{0}{1}"+tvar+" := "+n1.result+" / "+ n2.result + "\n";
      	RESULT = new Node("/",k,code,tvar); 
      
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp MENOS exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
      	Node[] k = {n1,n2}; 
      	String tvar = SymTable.getTempVar();
      	String code = "{0}{1}"+tvar+" := "+n1.result+" - "+ n2.result + "\n";
      	RESULT = new Node("-",k,code,tvar); 
      
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp MAIS exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
      	Node[] k = {n1,n2}; 
      	String tvar = SymTable.getTempVar();
      	String code = "{0}{1}"+tvar+" := "+n1.result+" + "+ n2.result + "\n";
      	RESULT = new Node("+",k,code,tvar); 
      
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp MULTIPLICACAO exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
      	Node[] k = {n1,n2}; 
      	String tvar = SymTable.getTempVar();
      	String code = "{0}{1}"+tvar+" := "+n1.result+" * "+ n2.result + "\n";
      	RESULT = new Node("*",k,code,tvar); 
      
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= tableconstructor 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
      	RESULT = n1;
      
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= prefixexp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
      	RESULT = n1;
      
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= function 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
      	RESULT = n1;
      
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= PONTOS3 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
      	RESULT = new Node(t1);	
      
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= STRING 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
      	RESULT = new Node(t1);	
      
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= NUMBER 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
      	RESULT = new Node(t1);	
      
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= TRUE 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
			RESULT = new Node(t1);	
		
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= FALSE 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
			RESULT = new Node(t1);	
		
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= NIL 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
			RESULT = new Node(t1);	
		
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // explist ::= exp VIRGULA explist 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
          		Node[] k = {n1,n2};
          		RESULT = new Node("explist",k,"{0}{1}",n1.result + "," + n2.result); 
          	
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("explist",5, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // explist ::= exp 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
		    	RESULT = n;
		    
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("explist",5, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // namelist ::= NAME VIRGULA namelist 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
            Node n = new Node(t1,SymTable.getVar(t1.value));
           	Node[] k = {n,n1}; 
           	RESULT = new Node("varlist",k,"",n.result + "," + n1.result); 
           
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("namelist",8, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // namelist ::= NAME 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
		 	RESULT = new Node(t,SymTable.getVar(t.value));
		   
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("namelist",8, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // var ::= prefixexp PONTO NAME 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
      	//Node[] k = {n1,new Node(t1),new Node(t2)}; 
      	//RESULT = new Node("var",k,"","TODO"); 
      	RESULT = new Node(t,SymTable.getVar(t.value));
      
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("var",12, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // var ::= prefixexp ACOL exp FCOL 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
      	//Node[] k = {n1,new Node(t1),n2,new Node(t2)}; 
      	//RESULT = new Node("var",k,"","TODO"); 
      	RESULT = n1;
      
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("var",12, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // var ::= NAME 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
			RESULT = new Node(t,SymTable.getVar(t.value));
		
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("var",12, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // varlist ::= var VIRGULA varlist 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
          		Node[] k = {n1,n2}; 
          		RESULT = new Node("varlist",k,"{0}\n{1}",n1.result + "," + n2.result); 
          	
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("varlist",4, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // varlist ::= var 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 			
				RESULT = n;
			
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("varlist",4, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funcname ::= funcname DPONTOS NAME 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
		   		Node[] k = {n1,new Node(t2),new Node(t3)}; 
		   		RESULT = new Node("funcname",k,"TODO - funcname"); 
		   
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("funcname",10, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funcname ::= NAME PONTO funcname 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
		   		Node[] k = {new Node(t1),new Node(t2),n1}; 
		   		RESULT = new Node("funcname",k,"TODO - funcname"); 
		   
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("funcname",10, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funcname ::= NAME 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
				Node[] k = {new Node(t1)}; 
				RESULT = new Node("funcname",k,t1.value); 
			
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("funcname",10, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // laststat ::= BREAK 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
		   		Node n = null;
		   		RESULT = new Node("laststat",n,"break");
		   	
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("laststat",2, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // laststat ::= RETURN 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
				Node n = null;
				RESULT = new Node("laststat",n,"return");
			
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("laststat",2, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // laststat ::= RETURN explist 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
				RESULT = new Node("laststat",n1,"{0}return "+n1.result+"\n");
				
			
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("laststat",2, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // elseif ::= ELSEIF exp THEN block ELSE block 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n3 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
		 	Node[] k = {n1,n2,n3}; 
		 	String label = SymTable.getLabel();
        	String label2 = SymTable.getLabel();
        	String code = "{0}if !"+n1.result+" goto "+label+"\n{1}goto "+label2+"\n"+label+":\n{2}"+label2+":\n";
		 	RESULT = new Node("elseif-else",k,code); 
		 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("elseif",20, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // elseif ::= ELSEIF exp THEN block elseif 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n3 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
		 	Node[] k = {n1,n2,n3}; 
		 	String label = SymTable.getLabel();
        	String label2 = SymTable.getLabel();
        	String code = "{0}if !"+n1.result+" goto "+label+"\n{1}goto "+label2+"\n"+label+":\n{2}"+label2+":\n";
		 	RESULT = new Node("elseif",k,code); 
		 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("elseif",20, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // elseif ::= ELSEIF exp THEN block 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
		 	Node[] k = {n1,n2};
		 	String label = SymTable.getLabel();
        	String code = "{0}if !"+n1.result+" goto "+label+"\n{1}"+label+":\n";
		 	RESULT = new Node("elseif",k,code); 
		 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("elseif",20, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stat ::= LOCAL namelist ATRIBUICAO explist 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		     
        	Node[] k = {n1,n2}; 
			String[] names = n1.result.split(",");
			String[] exps = n2.result.split(",");
			String code = "{1}";
			for(int i=0;i<names.length;i++) code += names[i] + " := " + exps[i] + "\n";			
			RESULT = new Node("=",k,code); 		
        
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stat ::= LOCAL namelist 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
			RESULT = n1;	
        
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stat ::= LOCAL FUNCTION NAME funcbody 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
        	String label = SymTable.getLabel();
        	String code = "goto "+label+"\n"+t3.value+":\n{0}"+label+":\n";
        	RESULT = new Node("local function",n1,code); 
        
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stat ::= FUNCTION funcname funcbody 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
        	String label = SymTable.getLabel();
        	String code = "goto "+label+"\n{0}:\n{1}"+label+":\n";
        	Node[] k = {n1,n2}; 
        	RESULT = new Node("function",k,code,""); 
        
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stat ::= FOR namelist IN explist DO block END 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n3 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t4 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
        	Node[] k = {new Node(t1),n1,new Node(t2),n2,new Node(t3),n3, new Node(t4)}; 
        	RESULT = new Node("stat",k); 
        
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stat ::= FOR NAME ATRIBUICAO exp VIRGULA exp VIRGULA exp DO block END 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-10)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-10)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-10)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-9)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-9)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-9)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-8)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-8)).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-7)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-7)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).right;
		LUAToken t4 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		LUAToken t5 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n3 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t6 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n4 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t7 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
        	String label0 = SymTable.getLabel();
        	String label1 = SymTable.getLabel();
        	String label2 = SymTable.getLabel();
        	String label3 = SymTable.getLabel();
        	
        	Node var = new Node(t2,SymTable.getVar(t2.value));
        	Node[] k = {n1,n2,n3,n4}; 
        	String code = "{0}{1}{2}" + var.result + " := " + n1.result;
        	code += "\n"+label0+":";
        	code += "\nif "+ n3.result +" < 0 then goto " + label1;
        	code += "\nif "+ var.result +" < "+ n2.result +" then goto " + label3;
        	code += "\ngoto "+label2+"\n"+label1+":";
        	code += "\nif "+ var.result +" > "+ n2.result +" then goto " + label3;
        	code += "\n"+label2+":\n{3}";
        	code += var.result + " := " + var.result + " + " + n3.result;
        	code += "\ngoto "+label0+"\n"+label3+":\n";
        	RESULT = new Node("for",k,code); 
        
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stat ::= FOR NAME ATRIBUICAO exp VIRGULA exp DO block END 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-8)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-8)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-8)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-7)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-7)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-7)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		LUAToken t4 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t5 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n3 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t6 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
        	String label = SymTable.getLabel();
        	String label2 = SymTable.getLabel();
        	
        	Node var = new Node(t2,SymTable.getVar(t2.value));
        	Node[] k = {n1,n2,n3}; 
        	String code = "{0}{1}"+ var.result + " := " + n1.result;
        	code += "\n"+label+":";
        	code += "\nif "+ var.result +" > "+ n2.result +" then goto " + label2;
        	code += "\n{2}";
        	code += var.result + " := " + var.result + " + 1";
        	code += "\ngoto "+label+"\n"+label2+":\n";
        	RESULT = new Node("for",k,code); 
        
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stat ::= IF exp THEN block elseif END 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n3 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
        	Node[] k = {n1,n2,n3}; 
        	String label = SymTable.getLabel();
        	String label2 = SymTable.getLabel();
        	
        	String code = "{0}if !"+n1.result+" goto "+label+"\n{1}goto "+label2+"\n"+label+":\n{2}"+label2+":\n";
        	RESULT = new Node("if",k,code); 
        
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stat ::= IF exp THEN block ELSE block END 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n3 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t4 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
        	Node[] k = {n1,n2,n3};
        	String label = SymTable.getLabel();
        	String label2 = SymTable.getLabel();
        	String code = "{0}if !"+n1.result+" goto "+label+"\n{1}goto "+label2+"\n"+label+":\n{2}"+label2+":\n";
        	RESULT = new Node("if-else",k,code);
        
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stat ::= IF exp THEN block END 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
        	Node[] k = {n1,n2};      	
        	String label = SymTable.getLabel();
        	String code = "{0}if !"+n1.result+" goto "+label+"\n{1}"+label+":\n";
        	RESULT = new Node("if",k,code);
        
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stat ::= REPEAT block UNTIL exp 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
        	Node[] k = {n1,n2};      	
        	String label = SymTable.getLabel();
        	String code = label+":\n{1}{0}if "+n1.result+" goto "+label;
        	RESULT = new Node("stat",k,code);
        
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stat ::= WHILE exp DO block END 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
        	Node[] k = {n1,n2};      	
        	String label = SymTable.getLabel();
        	String label2 = SymTable.getLabel();
        	String code = label+":\n{0}if "+n1.result+" goto "+label2+"\n{1}goto "+label+"\n"+label2+":\n";
        	RESULT = new Node("while",k,code);
        
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stat ::= DO block END 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stat ::= functioncall 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stat ::= varlist ATRIBUICAO explist 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
			Node[] k = {n1,n2}; 
			String[] vars = n1.result.split(",");
			String[] exps = n2.result.split(",");
			String code = "{1}";
			for(int i=0;i<vars.length;i++) code += vars[i] + " := " + exps[i] + "\n";			
			RESULT = new Node("=",k,code); 		
		
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // block ::= chunk 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("block",3, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // chunk ::= laststat PVIRGULA 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("chunk",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // chunk ::= laststat 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("chunk",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // chunk ::= stat PVIRGULA chunk 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
			Node[] k = {n1,n2}; 
			RESULT = new Node("chunk",k,"{0}{1}"); 
		
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("chunk",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // chunk ::= stat chunk 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
			Node[] k = {n1,n2}; 
			RESULT = new Node("chunk",k,"{0}{1}"); 
		
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("chunk",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // chunk ::= stat PVIRGULA 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("chunk",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // chunk ::= stat 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("chunk",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= chunk EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		RESULT = start_val;
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalisadorSintatico$parser.done_parsing();
          return CUP$AnalisadorSintatico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


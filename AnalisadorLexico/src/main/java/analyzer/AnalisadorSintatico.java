
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Nov 25 12:57:30 BRST 2016
//----------------------------------------------------

package analyzer;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Nov 25 12:57:30 BRST 2016
  */
public class AnalisadorSintatico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalisadorSintatico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalisadorSintatico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalisadorSintatico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\005\000\002\002\006\000\002\005\003" +
    "\000\002\003\005\000\002\003\003\000\002\003\005\000" +
    "\002\003\007\000\002\003\006\000\002\003\007\000\002" +
    "\003\011\000\002\003\010\000\002\003\012\000\002\003" +
    "\013\000\002\003\015\000\002\003\011\000\002\003\005" +
    "\000\002\003\006\000\002\003\004\000\002\003\006\000" +
    "\002\026\006\000\002\026\007\000\002\004\004\000\002" +
    "\004\003\000\002\014\003\000\002\014\004\000\002\014" +
    "\006\000\002\027\004\000\002\027\005\000\002\006\003" +
    "\000\002\006\004\000\002\030\004\000\002\030\004\000" +
    "\002\016\003\000\002\016\006\000\002\016\005\000\002" +
    "\012\003\000\002\012\004\000\002\032\004\000\002\032" +
    "\004\000\002\007\003\000\002\007\004\000\002\033\004" +
    "\000\002\033\004\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\017\003\000" +
    "\002\017\003\000\002\017\005\000\002\010\004\000\002" +
    "\010\006\000\002\021\005\000\002\021\003\000\002\021" +
    "\003\000\002\013\004\000\002\015\007\000\002\022\003" +
    "\000\002\022\005\000\002\022\003\000\002\020\005\000" +
    "\002\023\004\000\002\023\005\000\002\031\004\000\002" +
    "\031\005\000\002\024\007\000\002\024\005\000\002\024" +
    "\003\000\002\025\003\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\024\004\010\020\021\023\017\025\004\026" +
    "\005\030\014\034\006\036\016\037\012\001\002\000\034" +
    "\004\010\010\023\016\044\020\021\021\045\022\046\036" +
    "\040\043\034\061\043\062\042\063\052\064\036\065\050" +
    "\001\002\000\024\004\010\020\021\023\017\025\004\026" +
    "\005\030\014\034\006\036\016\037\012\001\002\000\004" +
    "\020\252\001\002\000\032\002\ufffa\004\uffb7\006\uffb7\010" +
    "\uffb7\012\uffb7\013\ufffa\015\uffb7\021\uffb7\024\ufffa\027\ufffa" +
    "\032\ufffa\033\ufffa\001\002\000\034\004\010\010\023\016" +
    "\044\020\021\021\045\022\046\036\040\043\034\061\043" +
    "\062\042\063\052\064\036\065\050\001\002\000\016\002" +
    "\000\013\240\024\000\027\000\032\000\033\000\001\002" +
    "\000\006\020\123\036\233\001\002\000\004\017\230\001" +
    "\002\000\034\004\010\010\023\016\044\020\021\021\045" +
    "\022\046\036\040\043\034\061\043\062\042\063\052\064" +
    "\036\065\050\001\002\000\004\002\206\001\002\000\004" +
    "\020\176\001\002\000\024\004\010\020\021\023\017\025" +
    "\004\026\005\030\014\034\006\036\016\037\012\001\002" +
    "\000\022\004\uffb8\006\uffb8\010\uffb8\012\uffb8\014\133\015" +
    "\uffb8\017\uffe2\021\uffb8\001\002\000\110\002\uffde\004\uffde" +
    "\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013" +
    "\uffde\014\uffde\015\uffde\017\uffde\021\uffde\023\uffde\024\uffde" +
    "\027\uffde\031\uffde\032\uffde\033\uffde\035\uffde\042\uffde\043" +
    "\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde" +
    "\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060" +
    "\uffde\001\002\000\016\004\030\006\025\010\023\012\031" +
    "\015\027\021\024\001\002\000\036\004\010\006\147\010" +
    "\023\016\044\020\151\021\045\022\046\036\040\043\034" +
    "\061\043\062\042\063\052\064\036\065\050\001\002\000" +
    "\104\002\uffb1\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1" +
    "\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\021\uffb1\023" +
    "\uffb1\024\uffb1\027\uffb1\031\uffb1\032\uffb1\033\uffb1\042\uffb1" +
    "\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051" +
    "\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1" +
    "\060\uffb1\001\002\000\034\004\010\010\023\016\044\020" +
    "\021\021\045\022\046\036\040\043\034\061\043\062\042" +
    "\063\052\064\036\065\050\001\002\000\104\002\uffb5\004" +
    "\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5" +
    "\013\uffb5\014\uffb5\015\uffb5\021\uffb5\023\uffb5\024\uffb5\027" +
    "\uffb5\031\uffb5\032\uffb5\033\uffb5\042\uffb5\043\uffb5\044\uffb5" +
    "\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053" +
    "\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\001\002" +
    "\000\004\020\143\001\002\000\034\004\010\010\023\016" +
    "\044\020\021\021\045\022\046\036\040\043\034\061\043" +
    "\062\042\063\052\064\036\065\050\001\002\000\004\020" +
    "\033\001\002\000\104\002\uffb2\004\uffb2\005\uffb2\006\uffb2" +
    "\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015" +
    "\uffb2\021\uffb2\023\uffb2\024\uffb2\027\uffb2\031\uffb2\032\uffb2" +
    "\033\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047" +
    "\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2" +
    "\056\uffb2\057\uffb2\060\uffb2\001\002\000\110\002\uffdc\004" +
    "\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc" +
    "\013\uffdc\014\uffdc\015\uffdc\017\uffdc\021\uffdc\023\uffdc\024" +
    "\uffdc\027\uffdc\031\uffdc\032\uffdc\033\uffdc\035\uffdc\042\uffdc" +
    "\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051" +
    "\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc" +
    "\060\uffdc\001\002\000\034\004\010\010\023\016\044\020" +
    "\021\021\045\022\046\036\040\043\034\061\043\062\042" +
    "\063\052\064\036\065\050\001\002\000\004\005\141\001" +
    "\002\000\034\004\010\010\023\016\044\020\021\021\045" +
    "\022\046\036\040\043\034\061\043\062\042\063\052\064" +
    "\036\065\050\001\002\000\070\002\uffcd\005\uffcd\007\uffcd" +
    "\011\uffcd\013\uffcd\014\uffcd\023\uffcd\024\uffcd\027\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd" +
    "\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054" +
    "\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\001\002\000\004" +
    "\004\120\001\002\000\062\002\uffd7\005\uffd7\013\uffd7\014" +
    "\115\023\uffd7\024\uffd7\027\uffd7\032\uffd7\033\uffd7\042\056" +
    "\043\063\044\067\045\072\046\071\047\065\050\061\051" +
    "\060\052\066\053\064\054\062\055\070\056\073\057\057" +
    "\060\074\001\002\000\070\002\uffd1\005\uffd1\007\uffd1\011" +
    "\uffd1\013\uffd1\014\uffd1\023\uffd1\024\uffd1\027\uffd1\031\uffd1" +
    "\032\uffd1\033\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046" +
    "\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1" +
    "\055\uffd1\056\uffd1\057\uffd1\060\uffd1\001\002\000\070\002" +
    "\uffd3\005\uffd3\007\uffd3\011\uffd3\013\uffd3\014\uffd3\023\uffd3" +
    "\024\uffd3\027\uffd3\031\uffd3\032\uffd3\033\uffd3\042\uffd3\043" +
    "\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3" +
    "\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\060" +
    "\uffd3\001\002\000\070\002\uffce\005\uffce\007\uffce\011\uffce" +
    "\013\uffce\014\uffce\023\uffce\024\uffce\027\uffce\031\uffce\032" +
    "\uffce\033\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce" +
    "\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055" +
    "\uffce\056\uffce\057\uffce\060\uffce\001\002\000\070\002\uffcf" +
    "\005\uffcf\007\uffcf\011\uffcf\013\uffcf\014\uffcf\023\uffcf\024" +
    "\uffcf\027\uffcf\031\uffcf\032\uffcf\033\uffcf\042\uffcf\043\uffcf" +
    "\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052" +
    "\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf" +
    "\001\002\000\070\002\uffd0\005\uffd0\007\uffd0\011\uffd0\013" +
    "\uffd0\014\uffd0\023\uffd0\024\uffd0\027\uffd0\031\uffd0\032\uffd0" +
    "\033\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047" +
    "\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0" +
    "\056\uffd0\057\uffd0\060\uffd0\001\002\000\104\002\uffb7\004" +
    "\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7" +
    "\013\uffb7\014\uffb7\015\uffb7\021\uffb7\023\uffb7\024\uffb7\027" +
    "\uffb7\031\uffb7\032\uffb7\033\uffb7\042\uffb7\043\uffb7\044\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053" +
    "\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\001\002" +
    "\000\034\004\010\010\023\016\044\020\021\021\045\022" +
    "\046\036\040\043\034\061\043\062\042\063\052\064\036" +
    "\065\050\001\002\000\070\002\uffcb\005\uffcb\007\uffcb\011" +
    "\uffcb\013\uffcb\014\uffcb\023\uffcb\024\uffcb\027\uffcb\031\uffcb" +
    "\032\uffcb\033\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046" +
    "\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb" +
    "\055\uffcb\056\uffcb\057\uffcb\060\uffcb\001\002\000\070\002" +
    "\uffd2\005\uffd2\007\uffd2\011\uffd2\013\uffd2\014\uffd2\023\uffd2" +
    "\024\uffd2\027\uffd2\031\uffd2\032\uffd2\033\uffd2\042\uffd2\043" +
    "\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2" +
    "\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060" +
    "\uffd2\001\002\000\104\002\uffcc\004\030\005\uffcc\006\025" +
    "\007\uffcc\010\023\011\uffcc\012\031\013\uffcc\014\uffcc\015" +
    "\027\021\024\023\uffcc\024\uffcc\027\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047" +
    "\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc" +
    "\056\uffcc\057\uffcc\060\uffcc\001\002\000\104\002\uffb8\004" +
    "\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8" +
    "\013\uffb8\014\uffb8\015\uffb8\021\uffb8\023\uffb8\024\uffb8\027" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\042\uffb8\043\uffb8\044\uffb8" +
    "\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\001\002" +
    "\000\070\002\uffb9\005\uffb9\007\uffb9\011\uffb9\013\uffb9\014" +
    "\uffb9\023\uffb9\024\uffb9\027\uffb9\031\uffb9\032\uffb9\033\uffb9" +
    "\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050" +
    "\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9" +
    "\057\uffb9\060\uffb9\001\002\000\034\004\010\010\023\016" +
    "\044\020\021\021\045\022\046\036\040\043\034\061\043" +
    "\062\042\063\052\064\036\065\050\001\002\000\034\004" +
    "\010\010\023\016\044\020\021\021\045\022\046\036\040" +
    "\043\034\061\043\062\042\063\052\064\036\065\050\001" +
    "\002\000\034\004\010\010\023\016\044\020\021\021\045" +
    "\022\046\036\040\043\034\061\043\062\042\063\052\064" +
    "\036\065\050\001\002\000\034\004\010\010\023\016\044" +
    "\020\021\021\045\022\046\036\040\043\034\061\043\062" +
    "\042\063\052\064\036\065\050\001\002\000\034\004\010" +
    "\010\023\016\044\020\021\021\045\022\046\036\040\043" +
    "\034\061\043\062\042\063\052\064\036\065\050\001\002" +
    "\000\034\004\010\010\023\016\044\020\021\021\045\022" +
    "\046\036\040\043\034\061\043\062\042\063\052\064\036" +
    "\065\050\001\002\000\034\004\010\010\023\016\044\020" +
    "\021\021\045\022\046\036\040\043\034\061\043\062\042" +
    "\063\052\064\036\065\050\001\002\000\034\004\010\010" +
    "\023\016\044\020\021\021\045\022\046\036\040\043\034" +
    "\061\043\062\042\063\052\064\036\065\050\001\002\000" +
    "\034\004\010\010\023\016\044\020\021\021\045\022\046" +
    "\036\040\043\034\061\043\062\042\063\052\064\036\065" +
    "\050\001\002\000\034\004\010\010\023\016\044\020\021" +
    "\021\045\022\046\036\040\043\034\061\043\062\042\063" +
    "\052\064\036\065\050\001\002\000\034\004\010\010\023" +
    "\016\044\020\021\021\045\022\046\036\040\043\034\061" +
    "\043\062\042\063\052\064\036\065\050\001\002\000\034" +
    "\004\010\010\023\016\044\020\021\021\045\022\046\036" +
    "\040\043\034\061\043\062\042\063\052\064\036\065\050" +
    "\001\002\000\034\004\010\010\023\016\044\020\021\021" +
    "\045\022\046\036\040\043\034\061\043\062\042\063\052" +
    "\064\036\065\050\001\002\000\034\004\010\010\023\016" +
    "\044\020\021\021\045\022\046\036\040\043\034\061\043" +
    "\062\042\063\052\064\036\065\050\001\002\000\034\004" +
    "\010\010\023\016\044\020\021\021\045\022\046\036\040" +
    "\043\034\061\043\062\042\063\052\064\036\065\050\001" +
    "\002\000\070\002\uffbc\005\uffbc\007\uffbc\011\uffbc\013\uffbc" +
    "\014\uffbc\023\uffbc\024\uffbc\027\uffbc\031\uffbc\032\uffbc\033" +
    "\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056" +
    "\uffbc\057\uffbc\060\uffbc\001\002\000\070\002\uffbe\005\uffbe" +
    "\007\uffbe\011\uffbe\013\uffbe\014\uffbe\023\uffbe\024\uffbe\027" +
    "\uffbe\031\uffbe\032\uffbe\033\uffbe\042\uffbe\043\uffbe\044\uffbe" +
    "\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053" +
    "\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\001\002" +
    "\000\070\002\uffc7\005\uffc7\007\uffc7\011\uffc7\013\uffc7\014" +
    "\uffc7\023\uffc7\024\uffc7\027\uffc7\031\uffc7\032\uffc7\033\uffc7" +
    "\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050" +
    "\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7" +
    "\057\uffc7\060\uffc7\001\002\000\070\002\uffc6\005\uffc6\007" +
    "\uffc6\011\uffc6\013\uffc6\014\uffc6\023\uffc6\024\uffc6\027\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\042\uffc6\043\uffc6\044\uffc6\045" +
    "\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6" +
    "\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\001\002\000" +
    "\070\002\uffbf\005\uffbf\007\uffbf\011\uffbf\013\uffbf\014\uffbf" +
    "\023\uffbf\024\uffbf\027\uffbf\031\uffbf\032\uffbf\033\uffbf\042" +
    "\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf" +
    "\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057" +
    "\uffbf\060\uffbf\001\002\000\070\002\uffc8\005\uffc8\007\uffc8" +
    "\011\uffc8\013\uffc8\014\uffc8\023\uffc8\024\uffc8\027\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054" +
    "\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\001\002\000\070" +
    "\002\uffc2\005\uffc2\007\uffc2\011\uffc2\013\uffc2\014\uffc2\023" +
    "\uffc2\024\uffc2\027\uffc2\031\uffc2\032\uffc2\033\uffc2\042\uffc2" +
    "\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051" +
    "\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2" +
    "\060\uffc2\001\002\000\070\002\uffc5\005\uffc5\007\uffc5\011" +
    "\uffc5\013\uffc5\014\uffc5\023\uffc5\024\uffc5\027\uffc5\031\uffc5" +
    "\032\uffc5\033\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046" +
    "\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5" +
    "\055\uffc5\056\uffc5\057\uffc5\060\uffc5\001\002\000\070\002" +
    "\uffc1\005\uffc1\007\uffc1\011\uffc1\013\uffc1\014\uffc1\023\uffc1" +
    "\024\uffc1\027\uffc1\031\uffc1\032\uffc1\033\uffc1\042\uffc1\043" +
    "\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1" +
    "\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060" +
    "\uffc1\001\002\000\070\002\uffc9\005\uffc9\007\uffc9\011\uffc9" +
    "\013\uffc9\014\uffc9\023\uffc9\024\uffc9\027\uffc9\031\uffc9\032" +
    "\uffc9\033\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9" +
    "\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055" +
    "\uffc9\056\uffc9\057\uffc9\060\uffc9\001\002\000\070\002\uffc0" +
    "\005\uffc0\007\uffc0\011\uffc0\013\uffc0\014\uffc0\023\uffc0\024" +
    "\uffc0\027\uffc0\031\uffc0\032\uffc0\033\uffc0\042\uffc0\043\uffc0" +
    "\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052" +
    "\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0" +
    "\001\002\000\070\002\uffc4\005\uffc4\007\uffc4\011\uffc4\013" +
    "\uffc4\014\uffc4\023\uffc4\024\uffc4\027\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047" +
    "\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4" +
    "\056\uffc4\057\uffc4\060\uffc4\001\002\000\070\002\uffc3\005" +
    "\uffc3\007\uffc3\011\uffc3\013\uffc3\014\uffc3\023\uffc3\024\uffc3" +
    "\027\uffc3\031\uffc3\032\uffc3\033\uffc3\042\uffc3\043\uffc3\044" +
    "\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3" +
    "\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\001" +
    "\002\000\070\002\uffbd\005\uffbd\007\uffbd\011\uffbd\013\uffbd" +
    "\014\uffbd\023\uffbd\024\uffbd\027\uffbd\031\uffbd\032\uffbd\033" +
    "\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd" +
    "\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056" +
    "\uffbd\057\uffbd\060\uffbd\001\002\000\070\002\uffca\005\uffca" +
    "\007\uffca\011\uffca\013\uffca\014\uffca\023\uffca\024\uffca\027" +
    "\uffca\031\uffca\032\uffca\033\uffca\042\uffca\043\uffca\044\uffca" +
    "\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053" +
    "\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\001\002" +
    "\000\022\002\uffd6\005\uffd6\013\uffd6\023\uffd6\024\uffd6\027" +
    "\uffd6\032\uffd6\033\uffd6\001\002\000\036\004\010\010\023" +
    "\014\115\016\044\020\021\021\045\022\046\036\040\043" +
    "\034\061\043\062\042\063\052\064\036\065\050\001\002" +
    "\000\022\002\uffd4\005\uffd4\013\uffd4\023\uffd4\024\uffd4\027" +
    "\uffd4\032\uffd4\033\uffd4\001\002\000\060\002\uffd5\005\uffd5" +
    "\013\uffd5\023\uffd5\024\uffd5\027\uffd5\032\uffd5\033\uffd5\042" +
    "\056\043\063\044\067\045\072\046\071\047\065\050\061" +
    "\051\060\052\066\053\064\054\062\055\070\056\073\057" +
    "\057\060\074\001\002\000\006\016\124\020\123\001\002" +
    "\000\070\002\uffb0\005\uffb0\007\uffb0\011\uffb0\013\uffb0\014" +
    "\uffb0\023\uffb0\024\uffb0\027\uffb0\031\uffb0\032\uffb0\033\uffb0" +
    "\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050" +
    "\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0" +
    "\057\uffb0\060\uffb0\001\002\000\006\005\uffae\014\136\001" +
    "\002\000\024\002\uffdb\005\uffdb\013\uffdb\014\133\017\uffdb" +
    "\024\uffdb\027\uffdb\032\uffdb\033\uffdb\001\002\000\004\005" +
    "\uffac\001\002\000\004\005\126\001\002\000\024\004\010" +
    "\020\021\023\017\025\004\026\005\030\014\034\006\036" +
    "\016\037\012\001\002\000\004\024\131\001\002\000\012" +
    "\024\ufffc\027\ufffc\032\ufffc\033\ufffc\001\002\000\070\002" +
    "\uffaf\005\uffaf\007\uffaf\011\uffaf\013\uffaf\014\uffaf\023\uffaf" +
    "\024\uffaf\027\uffaf\031\uffaf\032\uffaf\033\uffaf\042\uffaf\043" +
    "\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf" +
    "\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060" +
    "\uffaf\001\002\000\026\002\uffda\005\uffda\013\uffda\014\uffda" +
    "\017\uffda\024\uffda\027\uffda\032\uffda\033\uffda\035\uffda\001" +
    "\002\000\010\004\010\014\133\020\021\001\002\000\042" +
    "\002\uffe0\004\uffb8\005\uffe0\006\uffb8\010\uffb8\012\uffb8\013" +
    "\uffe0\014\uffe0\015\uffb8\017\uffe0\021\uffb8\024\uffe0\027\uffe0" +
    "\032\uffe0\033\uffe0\035\uffe0\001\002\000\026\002\uffdf\005" +
    "\uffdf\013\uffdf\014\uffdf\017\uffdf\024\uffdf\027\uffdf\032\uffdf" +
    "\033\uffdf\035\uffdf\001\002\000\004\016\137\001\002\000" +
    "\004\005\uffad\001\002\000\070\002\uffba\005\uffba\007\uffba" +
    "\011\uffba\013\uffba\014\uffba\023\uffba\024\uffba\027\uffba\031" +
    "\uffba\032\uffba\033\uffba\042\uffba\043\uffba\044\uffba\045\uffba" +
    "\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054" +
    "\uffba\055\uffba\056\uffba\057\uffba\060\uffba\001\002\000\104" +
    "\002\uffb3\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011" +
    "\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\021\uffb3\023\uffb3" +
    "\024\uffb3\027\uffb3\031\uffb3\032\uffb3\033\uffb3\042\uffb3\043" +
    "\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3" +
    "\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060" +
    "\uffb3\001\002\000\070\002\uffbb\005\uffbb\007\uffbb\011\uffbb" +
    "\013\uffbb\014\uffbb\023\uffbb\024\uffbb\027\uffbb\031\uffbb\032" +
    "\uffbb\033\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb" +
    "\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055" +
    "\uffbb\056\uffbb\057\uffbb\060\uffbb\001\002\000\010\004\030" +
    "\010\023\021\024\001\002\000\104\002\uffb4\004\uffb4\005" +
    "\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4" +
    "\014\uffb4\015\uffb4\021\uffb4\023\uffb4\024\uffb4\027\uffb4\031" +
    "\uffb4\032\uffb4\033\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4" +
    "\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054" +
    "\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\001\002\000\042" +
    "\007\146\042\056\043\063\044\067\045\072\046\071\047" +
    "\065\050\061\051\060\052\066\053\064\054\062\055\070" +
    "\056\073\057\057\060\074\001\002\000\110\002\uffdd\004" +
    "\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\017\uffdd\021\uffdd\023\uffdd\024" +
    "\uffdd\027\uffdd\031\uffdd\032\uffdd\033\uffdd\035\uffdd\042\uffdd" +
    "\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051" +
    "\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd" +
    "\060\uffdd\001\002\000\034\004\010\010\023\016\044\020" +
    "\021\021\045\022\046\036\040\043\034\061\043\062\042" +
    "\063\052\064\036\065\050\001\002\000\006\013\157\014" +
    "\162\001\002\000\064\004\uffde\006\uffde\010\uffde\011\uffde" +
    "\012\uffde\013\uffde\014\uffde\015\uffde\017\155\021\uffde\042" +
    "\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde" +
    "\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057" +
    "\uffde\060\uffde\001\002\000\046\011\uffa4\013\uffa4\014\uffa4" +
    "\042\056\043\063\044\067\045\072\046\071\047\065\050" +
    "\061\051\060\052\066\053\064\054\062\055\070\056\073" +
    "\057\057\060\074\001\002\000\004\011\154\001\002\000" +
    "\104\002\uffab\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab" +
    "\011\uffab\012\uffab\013\uffab\014\uffab\015\uffab\021\uffab\023" +
    "\uffab\024\uffab\027\uffab\031\uffab\032\uffab\033\uffab\042\uffab" +
    "\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051" +
    "\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab" +
    "\060\uffab\001\002\000\034\004\010\010\023\016\044\020" +
    "\021\021\045\022\046\036\040\043\034\061\043\062\042" +
    "\063\052\064\036\065\050\001\002\000\046\011\uffa5\013" +
    "\uffa5\014\uffa5\042\056\043\063\044\067\045\072\046\071" +
    "\047\065\050\061\051\060\052\066\053\064\054\062\055" +
    "\070\056\073\057\057\060\074\001\002\000\040\004\uffa2" +
    "\006\uffa2\010\uffa2\011\uffa2\016\uffa2\020\uffa2\021\uffa2\022" +
    "\uffa2\036\uffa2\043\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2" +
    "\065\uffa2\001\002\000\010\011\uffaa\013\157\014\162\001" +
    "\002\000\036\004\010\006\147\010\023\016\044\020\151" +
    "\021\045\022\046\036\040\043\034\061\043\062\042\063" +
    "\052\064\036\065\050\001\002\000\040\004\uffa3\006\uffa3" +
    "\010\uffa3\011\uffa3\016\uffa3\020\uffa3\021\uffa3\022\uffa3\036" +
    "\uffa3\043\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3" +
    "\001\002\000\010\011\uffa8\013\157\014\162\001\002\000" +
    "\010\011\uffa7\013\uffa7\014\uffa7\001\002\000\004\011\uffa9" +
    "\001\002\000\042\007\167\042\056\043\063\044\067\045" +
    "\072\046\071\047\065\050\061\051\060\052\066\053\064" +
    "\054\062\055\070\056\073\057\057\060\074\001\002\000" +
    "\004\017\170\001\002\000\034\004\010\010\023\016\044" +
    "\020\021\021\045\022\046\036\040\043\034\061\043\062" +
    "\042\063\052\064\036\065\050\001\002\000\046\011\uffa6" +
    "\013\uffa6\014\uffa6\042\056\043\063\044\067\045\072\046" +
    "\071\047\065\050\061\051\060\052\066\053\064\054\062" +
    "\055\070\056\073\057\057\060\074\001\002\000\004\017" +
    "\uffe1\001\002\000\004\024\174\001\002\000\016\002\ufff9" +
    "\013\ufff9\024\ufff9\027\ufff9\032\ufff9\033\ufff9\001\002\000" +
    "\004\004\120\001\002\000\006\004\uffe7\012\200\001\002" +
    "\000\006\004\uffe6\015\203\001\002\000\004\020\201\001" +
    "\002\000\010\004\uffe4\012\200\015\uffe4\001\002\000\006" +
    "\004\uffe3\015\uffe3\001\002\000\004\020\204\001\002\000" +
    "\004\004\uffe5\001\002\000\016\002\uffef\013\uffef\024\uffef" +
    "\027\uffef\032\uffef\033\uffef\001\002\000\004\002\001\001" +
    "\002\000\042\031\210\042\056\043\063\044\067\045\072" +
    "\046\071\047\065\050\061\051\060\052\066\053\064\054" +
    "\062\055\070\056\073\057\057\060\074\001\002\000\024" +
    "\004\010\020\021\023\017\025\004\026\005\030\014\034" +
    "\006\036\016\037\012\001\002\000\010\024\215\032\212" +
    "\033\213\001\002\000\034\004\010\010\023\016\044\020" +
    "\021\021\045\022\046\036\040\043\034\061\043\062\042" +
    "\063\052\064\036\065\050\001\002\000\024\004\010\020" +
    "\021\023\017\025\004\026\005\030\014\034\006\036\016" +
    "\037\012\001\002\000\006\024\217\033\216\001\002\000" +
    "\016\002\ufff6\013\ufff6\024\ufff6\027\ufff6\032\ufff6\033\ufff6" +
    "\001\002\000\024\004\010\020\021\023\017\025\004\026" +
    "\005\030\014\034\006\036\016\037\012\001\002\000\016" +
    "\002\ufff4\013\ufff4\024\ufff4\027\ufff4\032\ufff4\033\ufff4\001" +
    "\002\000\004\024\221\001\002\000\016\002\ufff3\013\ufff3" +
    "\024\ufff3\027\ufff3\032\ufff3\033\ufff3\001\002\000\004\024" +
    "\223\001\002\000\016\002\ufff5\013\ufff5\024\ufff5\027\ufff5" +
    "\032\ufff5\033\ufff5\001\002\000\042\031\225\042\056\043" +
    "\063\044\067\045\072\046\071\047\065\050\061\051\060" +
    "\052\066\053\064\054\062\055\070\056\073\057\057\060" +
    "\074\001\002\000\024\004\010\020\021\023\017\025\004" +
    "\026\005\030\014\034\006\036\016\037\012\001\002\000" +
    "\010\024\uffeb\032\212\033\uffeb\001\002\000\006\024\uffea" +
    "\033\uffea\001\002\000\034\004\010\010\023\016\044\020" +
    "\021\021\045\022\046\036\040\043\034\061\043\062\042" +
    "\063\052\064\036\065\050\001\002\000\016\002\ufffb\013" +
    "\ufffb\024\ufffb\027\ufffb\032\ufffb\033\ufffb\001\002\000\020" +
    "\002\uffed\013\uffed\017\236\024\uffed\027\uffed\032\uffed\033" +
    "\uffed\001\002\000\004\020\234\001\002\000\004\004\120" +
    "\001\002\000\016\002\uffee\013\uffee\024\uffee\027\uffee\032" +
    "\uffee\033\uffee\001\002\000\034\004\010\010\023\016\044" +
    "\020\021\021\045\022\046\036\040\043\034\061\043\062" +
    "\042\063\052\064\036\065\050\001\002\000\016\002\uffec" +
    "\013\uffec\024\uffec\027\uffec\032\uffec\033\uffec\001\002\000" +
    "\042\002\uffff\004\010\020\021\023\017\024\uffff\025\004" +
    "\026\005\027\uffff\030\014\032\uffff\033\uffff\034\006\036" +
    "\016\037\012\040\242\041\244\001\002\000\004\013\246" +
    "\001\002\000\034\004\010\010\023\016\044\020\021\021" +
    "\045\022\046\036\040\043\034\061\043\062\042\063\052" +
    "\064\036\065\050\001\002\000\014\002\ufffe\024\ufffe\027" +
    "\ufffe\032\ufffe\033\ufffe\001\002\000\004\013\uffe8\001\002" +
    "\000\004\013\uffe9\001\002\000\014\002\ufffd\024\ufffd\027" +
    "\ufffd\032\ufffd\033\ufffd\001\002\000\042\005\250\042\056" +
    "\043\063\044\067\045\072\046\071\047\065\050\061\051" +
    "\060\052\066\053\064\054\062\055\070\056\073\057\057" +
    "\060\074\001\002\000\104\002\uffb6\004\uffb6\005\uffb6\006" +
    "\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6" +
    "\015\uffb6\021\uffb6\023\uffb6\024\uffb6\027\uffb6\031\uffb6\032" +
    "\uffb6\033\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6" +
    "\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055" +
    "\uffb6\056\uffb6\057\uffb6\060\uffb6\001\002\000\004\035\267" +
    "\001\002\000\010\014\133\017\253\035\uffdb\001\002\000" +
    "\034\004\010\010\023\016\044\020\021\021\045\022\046" +
    "\036\040\043\034\061\043\062\042\063\052\064\036\065" +
    "\050\001\002\000\042\014\255\042\056\043\063\044\067" +
    "\045\072\046\071\047\065\050\061\051\060\052\066\053" +
    "\064\054\062\055\070\056\073\057\057\060\074\001\002" +
    "\000\034\004\010\010\023\016\044\020\021\021\045\022" +
    "\046\036\040\043\034\061\043\062\042\063\052\064\036" +
    "\065\050\001\002\000\044\014\257\023\260\042\056\043" +
    "\063\044\067\045\072\046\071\047\065\050\061\051\060" +
    "\052\066\053\064\054\062\055\070\056\073\057\057\060" +
    "\074\001\002\000\034\004\010\010\023\016\044\020\021" +
    "\021\045\022\046\036\040\043\034\061\043\062\042\063" +
    "\052\064\036\065\050\001\002\000\024\004\010\020\021" +
    "\023\017\025\004\026\005\030\014\034\006\036\016\037" +
    "\012\001\002\000\004\024\262\001\002\000\016\002\ufff2" +
    "\013\ufff2\024\ufff2\027\ufff2\032\ufff2\033\ufff2\001\002\000" +
    "\042\023\264\042\056\043\063\044\067\045\072\046\071" +
    "\047\065\050\061\051\060\052\066\053\064\054\062\055" +
    "\070\056\073\057\057\060\074\001\002\000\024\004\010" +
    "\020\021\023\017\025\004\026\005\030\014\034\006\036" +
    "\016\037\012\001\002\000\004\024\266\001\002\000\016" +
    "\002\ufff1\013\ufff1\024\ufff1\027\ufff1\032\ufff1\033\ufff1\001" +
    "\002\000\034\004\010\010\023\016\044\020\021\021\045" +
    "\022\046\036\040\043\034\061\043\062\042\063\052\064" +
    "\036\065\050\001\002\000\004\023\271\001\002\000\024" +
    "\004\010\020\021\023\017\025\004\026\005\030\014\034" +
    "\006\036\016\037\012\001\002\000\004\024\273\001\002" +
    "\000\016\002\ufff0\013\ufff0\024\ufff0\027\ufff0\032\ufff0\033" +
    "\ufff0\001\002\000\004\027\275\001\002\000\034\004\010" +
    "\010\023\016\044\020\021\021\045\022\046\036\040\043" +
    "\034\061\043\062\042\063\052\064\036\065\050\001\002" +
    "\000\054\002\ufff7\013\ufff7\024\ufff7\027\ufff7\032\ufff7\033" +
    "\ufff7\042\056\043\063\044\067\045\072\046\071\047\065" +
    "\050\061\051\060\052\066\053\064\054\062\055\070\056" +
    "\073\057\057\060\074\001\002\000\042\023\300\042\056" +
    "\043\063\044\067\045\072\046\071\047\065\050\061\051" +
    "\060\052\066\053\064\054\062\055\070\056\073\057\057" +
    "\060\074\001\002\000\024\004\010\020\021\023\017\025" +
    "\004\026\005\030\014\034\006\036\016\037\012\001\002" +
    "\000\004\024\302\001\002\000\016\002\ufff8\013\ufff8\024" +
    "\ufff8\027\ufff8\032\ufff8\033\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\016\002\014\003\010\006\012\010\006\016" +
    "\017\017\021\001\001\000\016\010\046\011\276\013\036" +
    "\016\053\017\052\020\050\001\001\000\020\002\127\003" +
    "\010\005\273\006\012\010\006\016\017\017\021\001\001" +
    "\000\004\012\250\001\001\000\002\001\001\000\016\010" +
    "\046\011\246\013\036\016\053\017\052\020\050\001\001" +
    "\000\002\001\001\000\004\012\231\001\001\000\002\001" +
    "\001\000\016\010\046\011\206\013\036\016\053\017\052" +
    "\020\050\001\001\000\002\001\001\000\004\014\174\001" +
    "\001\000\020\002\127\003\010\005\172\006\012\010\006" +
    "\016\017\017\021\001\001\000\004\030\171\001\001\000" +
    "\002\001\001\000\006\020\031\021\025\001\001\000\022" +
    "\010\046\011\151\013\036\016\053\017\052\020\050\023" +
    "\152\024\147\001\001\000\002\001\001\000\016\010\046" +
    "\011\144\013\036\016\053\017\052\020\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\007\034\010\046" +
    "\011\040\013\036\016\053\017\052\020\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\010\046\011\141\013\036\016\053\017\052\020\050\001" +
    "\001\000\002\001\001\000\016\010\046\011\137\013\036" +
    "\016\053\017\052\020\050\001\001\000\002\001\001\000" +
    "\004\015\120\001\001\000\004\033\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\010\046" +
    "\011\054\013\036\016\053\017\052\020\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\031\021\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\010" +
    "\046\011\112\013\036\016\053\017\052\020\050\001\001" +
    "\000\016\010\046\011\111\013\036\016\053\017\052\020" +
    "\050\001\001\000\016\010\046\011\110\013\036\016\053" +
    "\017\052\020\050\001\001\000\016\010\046\011\107\013" +
    "\036\016\053\017\052\020\050\001\001\000\016\010\046" +
    "\011\106\013\036\016\053\017\052\020\050\001\001\000" +
    "\016\010\046\011\105\013\036\016\053\017\052\020\050" +
    "\001\001\000\016\010\046\011\104\013\036\016\053\017" +
    "\052\020\050\001\001\000\016\010\046\011\103\013\036" +
    "\016\053\017\052\020\050\001\001\000\016\010\046\011" +
    "\102\013\036\016\053\017\052\020\050\001\001\000\016" +
    "\010\046\011\101\013\036\016\053\017\052\020\050\001" +
    "\001\000\016\010\046\011\100\013\036\016\053\017\052" +
    "\020\050\001\001\000\016\010\046\011\077\013\036\016" +
    "\053\017\052\020\050\001\001\000\016\010\046\011\076" +
    "\013\036\016\053\017\052\020\050\001\001\000\016\010" +
    "\046\011\075\013\036\016\053\017\052\020\050\001\001" +
    "\000\016\010\046\011\074\013\036\016\053\017\052\020" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\010\046\011\116\013\036\016\053\017" +
    "\052\020\050\033\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\121\022\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\002\127\003\010\005" +
    "\126\006\012\010\006\016\017\017\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\010\046\016\133\017\021\030\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\031\021\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\010\046" +
    "\011\165\013\036\016\053\017\052\020\050\001\001\000" +
    "\006\025\160\031\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\010" +
    "\046\011\155\013\036\016\053\017\052\020\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\164\001" +
    "\001\000\020\010\046\011\151\013\036\016\053\017\052" +
    "\020\050\024\162\001\001\000\002\001\001\000\006\025" +
    "\160\031\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\010\046\011" +
    "\170\013\036\016\053\017\052\020\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\204\001\001\000\004\027\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\201\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\002\127\003\010\005\210\006\012\010\006\016\017" +
    "\017\021\001\001\000\004\026\213\001\001\000\016\010" +
    "\046\011\223\013\036\016\053\017\052\020\050\001\001" +
    "\000\020\002\127\003\010\005\221\006\012\010\006\016" +
    "\017\017\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\002\127\003\010\005\217\006\012\010\006\016" +
    "\017\017\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\002\127\003\010\005\225\006\012" +
    "\010\006\016\017\017\021\001\001\000\004\026\226\001" +
    "\001\000\002\001\001\000\020\007\230\010\046\011\040" +
    "\013\036\016\053\017\052\020\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\234" +
    "\001\001\000\002\001\001\000\020\007\236\010\046\011" +
    "\040\013\036\016\053\017\052\020\050\001\001\000\002" +
    "\001\001\000\020\002\242\003\010\004\240\006\012\010" +
    "\006\016\017\017\021\001\001\000\002\001\001\000\020" +
    "\007\244\010\046\011\040\013\036\016\053\017\052\020" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\131\001\001\000\016" +
    "\010\046\011\253\013\036\016\053\017\052\020\050\001" +
    "\001\000\002\001\001\000\016\010\046\011\255\013\036" +
    "\016\053\017\052\020\050\001\001\000\002\001\001\000" +
    "\016\010\046\011\262\013\036\016\053\017\052\020\050" +
    "\001\001\000\020\002\127\003\010\005\260\006\012\010" +
    "\006\016\017\017\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\002\127\003\010\005" +
    "\264\006\012\010\006\016\017\017\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\007\267\010\046\011" +
    "\040\013\036\016\053\017\052\020\050\001\001\000\002" +
    "\001\001\000\020\002\127\003\010\005\271\006\012\010" +
    "\006\016\017\017\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\010\046\011\275\013" +
    "\036\016\053\017\052\020\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\002\127\003\010\005\300\006" +
    "\012\010\006\016\017\017\021\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalisadorSintatico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalisadorSintatico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalisadorSintatico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info)  {
        System.out.println("Warning - " + message);
    }

    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message);
        System.exit(-1);
    }

	public void syntax_error(Symbol cur_token) {
		System.out.println("Syntax Error - " + ((LUAToken)cur_token.value).value);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalisadorSintatico$actions {
  private final AnalisadorSintatico parser;

  /** Constructor */
  CUP$AnalisadorSintatico$actions(AnalisadorSintatico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalisadorSintatico$do_action(
    int                        CUP$AnalisadorSintatico$act_num,
    java_cup.runtime.lr_parser CUP$AnalisadorSintatico$parser,
    java.util.Stack            CUP$AnalisadorSintatico$stack,
    int                        CUP$AnalisadorSintatico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalisadorSintatico$result;

      /* select the action based on the action number */
      switch (CUP$AnalisadorSintatico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // fieldsep ::= PVIRGULA 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node("fieldsep",new Node(t1));  
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("fieldsep",19, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // fieldsep ::= VIRGULA 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node("fieldsep",new Node(t1));  
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("fieldsep",19, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // field ::= exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node("field",n1);  
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("field",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // field ::= NAME ATRIBUICAO exp 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),new Node(t2),n1}; RESULT = new Node("field",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("field",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // field ::= ACOL exp FCOL ATRIBUICAO exp 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,new Node(t2),new Node(t3),n2}; RESULT = new Node("field",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("field",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // fieldlist2 ::= fieldsep field fieldlist2 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n3 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,n2,n3}; RESULT = new Node("fieldlist2",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("fieldlist2",23, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // fieldlist2 ::= fieldsep field 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,n2}; RESULT = new Node("fieldlist2",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("fieldlist2",23, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // fieldlist ::= field fieldlist2 fieldsep 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n3 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,n2,n3}; RESULT = new Node("fieldlist",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("fieldlist",17, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // fieldlist ::= field fieldlist2 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,n2}; RESULT = new Node("fieldlist",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("fieldlist",17, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // tableconstructor ::= ACHA fieldlist FCHA 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,new Node(t2)}; RESULT = new Node("tableconstructor",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("tableconstructor",14, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parlist ::= PONTOS3 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node("parlist",new Node(t1));  
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("parlist",16, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parlist ::= namelist VIRGULA PONTOS3 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,new Node(t1),new Node(t2)}; RESULT = new Node("parlist",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("parlist",16, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parlist ::= namelist 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node("parlist",n1); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("parlist",16, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // funcbody ::= APAR parlist FPAR block END 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,new Node(t2),n2,new Node(t3)}; RESULT = new Node("funcbody",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("funcbody",11, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // function ::= FUNCTION funcbody 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1}; RESULT = new Node("function",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("function",9, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // args ::= STRING 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node("args",new Node(t1));  
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("args",15, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // args ::= tableconstructor 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node("tableconstructor",n1); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("args",15, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // args ::= APAR explist FPAR 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,new Node(t2)}; RESULT = new Node("args",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("args",15, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // functioncall ::= prefixexp DPONTOS NAME args 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,new Node(t1),new Node(t2),n2}; RESULT = new Node("functioncall",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("functioncall",6, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // functioncall ::= prefixexp args 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,n2}; RESULT = new Node("functioncall",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("functioncall",6, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // prefixexp ::= APAR exp FPAR 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,new Node(t2)}; RESULT = new Node("prefixexp",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("prefixexp",13, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // prefixexp ::= functioncall 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node("prefixexp",n1);  
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("prefixexp",13, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // prefixexp ::= var 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node("prefixexp",n1); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("prefixexp",13, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // exp ::= TRALHA exp 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1}; RESULT = new Node("exp",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exp ::= NOT exp 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1}; RESULT = new Node("exp",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exp ::= MENOS exp 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1}; RESULT = new Node("exp",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exp ::= exp OR exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,new Node(t1),n2}; RESULT = new Node("exp",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exp ::= exp AND exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,new Node(t1),n2}; RESULT = new Node("exp",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exp ::= exp DIFERENTE exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,new Node(t1),n2}; RESULT = new Node("exp",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exp ::= exp IGUAL exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,new Node(t1),n2}; RESULT = new Node("exp",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp ::= exp MAIOR exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,new Node(t1),n2}; RESULT = new Node("exp",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp ::= exp MENOR exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,new Node(t1),n2}; RESULT = new Node("exp",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= exp MAIORIGUAL exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,new Node(t1),n2}; RESULT = new Node("exp",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= exp MENORIGUAL exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,new Node(t1),n2}; RESULT = new Node("exp",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= exp PONTOS2 exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,new Node(t1),n2}; RESULT = new Node("exp",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= exp RESTO exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,new Node(t1),n2}; RESULT = new Node("exp",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= exp EXPOENTE exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,new Node(t1),n2}; RESULT = new Node("exp",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= exp DIVISAO exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,new Node(t1),n2}; RESULT = new Node("exp",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= exp MULTIPLICACAO exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,new Node(t1),n2}; RESULT = new Node("exp",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= exp MENOS exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,new Node(t1),n2}; RESULT = new Node("exp",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= exp MAIS exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,new Node(t1),n2}; RESULT = new Node("exp",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= tableconstructor 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node("exp",n1);  
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= prefixexp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node("exp",n1);  
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= function 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node("exp",n1);  
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= PONTOS3 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node("exp",new Node(t1));  
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= STRING 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node("exp",new Node(t1));  
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= NUMBER 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node("exp",new Node(t1));  
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= TRUE 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node("exp",new Node(t1));  
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= FALSE 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node("exp",new Node(t1));  
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= NIL 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node("exp",new Node(t1));  
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // explist2 ::= VIRGULA explist2 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1}; RESULT = new Node("explist2",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("explist2",25, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // explist2 ::= VIRGULA exp 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1}; RESULT = new Node("explist2",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("explist2",25, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // explist ::= exp explist2 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,n2}; RESULT = new Node("explist",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("explist",5, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // explist ::= exp 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("explist",5, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // namelist2 ::= VIRGULA namelist2 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1}; RESULT = new Node("namelist2",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("namelist2",24, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // namelist2 ::= VIRGULA NAME 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),new Node(t2)}; RESULT = new Node("namelist2",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("namelist2",24, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // namelist ::= NAME varlist2 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1}; RESULT = new Node("namelist",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("namelist",8, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // namelist ::= NAME 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node("namelist",new Node(t1));  
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("namelist",8, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var ::= prefixexp PONTO NAME 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,new Node(t1),new Node(t2)}; RESULT = new Node("var",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("var",12, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // var ::= prefixexp ACOL exp FCOL 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,new Node(t1),n2,new Node(t2)}; RESULT = new Node("var",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("var",12, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // var ::= NAME 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node(t); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("var",12, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // varlist2 ::= VIRGULA varlist2 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1}; RESULT = new Node("varlist2",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("varlist2",22, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // varlist2 ::= VIRGULA var 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1}; RESULT = new Node("varlist2",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("varlist2",22, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // varlist ::= var varlist2 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,n2}; RESULT = new Node("varlist",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("varlist",4, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // varlist ::= var 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("varlist",4, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funcname2 ::= PONTO NAME funcname2 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),new Node(t2),n1}; RESULT = new Node("laststat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("funcname2",21, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funcname2 ::= PONTO NAME 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),new Node(t2)}; RESULT = new Node("funcname2",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("funcname2",21, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // funcname ::= NAME funcname2 DPONTOS NAME 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,new Node(t2),new Node(t3)}; RESULT = new Node("funcname",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("funcname",10, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // funcname ::= NAME funcname2 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1}; RESULT = new Node("funcname",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("funcname",10, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // funcname ::= NAME 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1)}; RESULT = new Node("funcname",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("funcname",10, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // laststat ::= BREAK 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1)}; RESULT = new Node("laststat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("laststat",2, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // laststat ::= RETURN explist 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1}; RESULT = new Node("laststat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("laststat",2, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // elseif ::= ELSEIF exp THEN block elseif 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n3 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,new Node(t2),n2,n3}; RESULT = new Node("elseif",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("elseif",20, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // elseif ::= ELSEIF exp THEN block 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,new Node(t2),n2}; RESULT = new Node("elseif",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("elseif",20, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stat ::= LOCAL namelist ATRIBUICAO explist 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,new Node(t2),n2}; RESULT = new Node("stat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stat ::= LOCAL namelist 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1}; RESULT = new Node("stat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stat ::= LOCAL FUNCTION NAME funcbody 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),new Node(t2),new Node(t3),n1}; RESULT = new Node("stat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stat ::= FUNCTION funcname funcbody 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,n2}; RESULT = new Node("stat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stat ::= FOR namelist IN explist DO block END 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n3 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t4 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,new Node(t2),n2,new Node(t3),n3, new Node(t4)}; RESULT = new Node("stat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stat ::= FOR NAME ATRIBUICAO exp VIRGULA exp VIRGULA exp DO block END 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-10)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-10)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-10)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-9)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-9)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-9)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-8)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-8)).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-7)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-7)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).right;
		LUAToken t4 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		LUAToken t5 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n3 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t6 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n4 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t7 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),new Node(t2),new Node(t3),n1,new Node(t4),n2,new Node(t5),n3,new Node(t6),n4,new Node(t7)}; RESULT = new Node("stat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stat ::= FOR NAME ATRIBUICAO exp VIRGULA exp DO block END 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-8)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-8)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-8)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-7)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-7)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-7)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		LUAToken t4 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t5 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n3 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t6 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),new Node(t2),new Node(t3),n1,new Node(t4),n2,new Node(t5),n3,new Node(t6)}; RESULT = new Node("stat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stat ::= IF exp THEN block elseif ELSE block END 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-7)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-7)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n3 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n4 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t4 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,new Node(t2),n2,n3,new Node(t3),n4,new Node(t4)}; RESULT = new Node("stat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stat ::= IF exp THEN block elseif END 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n3 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,new Node(t2),n2,n3,new Node(t3)}; RESULT = new Node("stat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stat ::= IF exp THEN block ELSE block END 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n3 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t4 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,new Node(t2),n2,new Node(t3),n3,new Node(t4)}; RESULT = new Node("stat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stat ::= IF exp THEN block END 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,new Node(t2),n2,new Node(t3)}; RESULT = new Node("stat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stat ::= REPEAT block UNTIL exp 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,new Node(t2),n2}; RESULT = new Node("stat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stat ::= WHILE exp DO block END 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,new Node(t2),n2,new Node(t3)}; RESULT = new Node("stat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stat ::= DO block END 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n,new Node(t2)}; RESULT = new Node("stat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stat ::= functioncall 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stat ::= varlist ATRIBUICAO explist 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,new Node(t),n2}; RESULT = new Node("stat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // block ::= chunk 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n}; RESULT = new Node("block",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("block",3, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // chunk ::= stat PVIRGULA laststat PVIRGULA 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,new Node(t1),n2,new Node(t2)}; RESULT = new Node("chunk",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("chunk",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // chunk ::= stat PVIRGULA chunk 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,new Node(t),n2}; RESULT = new Node("chunk",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("chunk",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // chunk ::= stat PVIRGULA 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n,new Node(t)}; RESULT = new Node("chunk",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("chunk",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // chunk ::= stat 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n}; RESULT = new Node("chunk",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("chunk",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= chunk EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		RESULT = start_val;
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalisadorSintatico$parser.done_parsing();
          return CUP$AnalisadorSintatico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}



//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 14 19:03:04 BRST 2016
//----------------------------------------------------

package analyzer;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 14 19:03:04 BRST 2016
  */
public class AnalisadorSintatico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalisadorSintatico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalisadorSintatico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalisadorSintatico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\002\006\000\002\005\003\000\002\003\005" +
    "\000\002\003\003\000\002\003\005\000\002\003\007\000" +
    "\002\003\006\000\002\003\017\000\002\003\015\000\002" +
    "\003\011\000\002\003\005\000\002\003\006\000\002\003" +
    "\006\000\002\004\004\000\002\004\003\000\002\014\011" +
    "\000\002\006\003\000\002\006\005\000\002\016\003\000" +
    "\002\016\006\000\002\016\005\000\002\012\007\000\002" +
    "\007\003\000\002\007\005\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\005\000" +
    "\002\011\004\000\002\017\003\000\002\017\003\000\002" +
    "\017\005\000\002\010\004\000\002\010\006\000\002\021" +
    "\005\000\002\021\003\000\002\021\003\000\002\013\004" +
    "\000\002\015\007\000\002\022\005\000\002\022\003\000" +
    "\002\020\005\000\002\023\007\000\002\024\007\000\002" +
    "\024\005\000\002\024\003\000\002\025\003\000\002\025" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\024\004\010\021\021\026\017\030\005\031" +
    "\004\033\013\037\006\041\016\042\012\001\002\000\024" +
    "\004\010\021\021\026\017\030\005\031\004\033\013\037" +
    "\006\041\016\042\012\001\002\000\024\004\010\010\023" +
    "\016\047\020\041\021\021\022\040\024\045\025\035\041" +
    "\044\001\002\000\004\021\201\001\002\000\020\004\uffdc" +
    "\006\uffdc\010\uffdc\012\uffdc\013\ufffb\015\uffdc\022\uffdc\001" +
    "\002\000\024\004\010\010\023\016\047\020\041\021\021" +
    "\022\040\024\045\025\035\041\044\001\002\000\004\013" +
    "\167\001\002\000\006\021\060\041\162\001\002\000\024" +
    "\004\010\010\023\016\047\020\041\021\021\022\040\024" +
    "\045\025\035\041\044\001\002\000\004\017\143\001\002" +
    "\000\004\002\142\001\002\000\004\021\132\001\002\000" +
    "\024\004\010\021\021\026\017\030\005\031\004\033\013" +
    "\037\006\041\016\042\012\001\002\000\022\004\uffdd\006" +
    "\uffdd\010\uffdd\012\uffdd\014\125\015\uffdd\017\uffee\022\uffdd" +
    "\001\002\000\040\004\uffec\005\uffec\006\uffec\007\uffec\010" +
    "\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\017\uffec" +
    "\022\uffec\023\uffec\026\uffec\034\uffec\001\002\000\016\004" +
    "\030\006\025\010\023\012\031\015\027\022\024\001\002" +
    "\000\026\004\010\006\103\010\023\016\047\020\041\021" +
    "\105\022\040\024\045\025\035\041\044\001\002\000\036" +
    "\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\022\uffd6\023\uffd6\026\uffd6" +
    "\034\uffd6\001\002\000\024\004\010\010\023\016\047\020" +
    "\041\021\021\022\040\024\045\025\035\041\044\001\002" +
    "\000\036\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011" +
    "\uffda\012\uffda\013\uffda\014\uffda\015\uffda\022\uffda\023\uffda" +
    "\026\uffda\034\uffda\001\002\000\004\021\077\001\002\000" +
    "\024\004\010\010\023\016\047\020\041\021\021\022\040" +
    "\024\045\025\035\041\044\001\002\000\004\021\033\001" +
    "\002\000\036\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7" +
    "\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\022\uffd7\023" +
    "\uffd7\026\uffd7\034\uffd7\001\002\000\040\004\uffea\005\uffea" +
    "\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014" +
    "\uffea\015\uffea\017\uffea\022\uffea\023\uffea\026\uffea\034\uffea" +
    "\001\002\000\036\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010" +
    "\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\022\uffdc" +
    "\023\uffdc\026\uffdc\034\uffdc\001\002\000\024\005\uffe5\007" +
    "\uffe5\010\uffe5\011\uffe5\013\uffe5\014\uffe5\023\uffe5\026\uffe5" +
    "\034\uffe5\001\002\000\014\005\uffe8\013\uffe8\014\075\023" +
    "\052\026\uffe8\001\002\000\024\005\uffe2\007\uffe2\010\uffe2" +
    "\011\uffe2\013\uffe2\014\uffe2\023\uffe2\026\uffe2\034\uffe2\001" +
    "\002\000\024\005\uffe4\007\uffe4\010\uffe4\011\uffe4\013\uffe4" +
    "\014\uffe4\023\uffe4\026\uffe4\034\uffe4\001\002\000\024\005" +
    "\uffe6\007\uffe6\010\uffe6\011\uffe6\013\uffe6\014\uffe6\023\uffe6" +
    "\026\uffe6\034\uffe6\001\002\000\004\005\074\001\002\000" +
    "\024\005\uffe0\007\uffe0\010\uffe0\011\uffe0\013\uffe0\014\uffe0" +
    "\023\uffe0\026\uffe0\034\uffe0\001\002\000\004\004\054\001" +
    "\002\000\024\004\010\010\023\016\047\020\041\021\021" +
    "\022\040\024\045\025\035\041\044\001\002\000\036\004" +
    "\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\022\uffdd\023\uffdd\026\uffdd\034" +
    "\uffdd\001\002\000\024\005\uffe3\007\uffe3\010\uffe3\011\uffe3" +
    "\013\uffe3\014\uffe3\023\uffe3\026\uffe3\034\uffe3\001\002\000" +
    "\036\004\030\005\uffe1\006\025\007\uffe1\010\023\011\uffe1" +
    "\012\031\013\uffe1\014\uffe1\015\027\022\024\023\uffe1\026" +
    "\uffe1\034\uffe1\001\002\000\024\005\uffde\007\uffde\010\uffde" +
    "\011\uffde\013\uffde\014\uffde\023\052\026\uffde\034\uffde\001" +
    "\002\000\024\004\010\010\023\016\047\020\041\021\021" +
    "\022\040\024\045\025\035\041\044\001\002\000\024\005" +
    "\uffdf\007\uffdf\010\uffdf\011\uffdf\013\uffdf\014\uffdf\023\052" +
    "\026\uffdf\034\uffdf\001\002\000\006\016\057\021\060\001" +
    "\002\000\024\005\uffd5\007\uffd5\010\uffd5\011\uffd5\013\uffd5" +
    "\014\uffd5\023\uffd5\026\uffd5\034\uffd5\001\002\000\004\014" +
    "\072\001\002\000\004\005\uffd2\001\002\000\004\010\066" +
    "\001\002\000\004\005\062\001\002\000\024\004\010\021" +
    "\021\026\017\030\005\031\004\033\013\037\006\041\016" +
    "\042\012\001\002\000\004\027\065\001\002\000\012\010" +
    "\ufffd\011\ufffd\027\ufffd\032\ufffd\001\002\000\024\005\uffd4" +
    "\007\uffd4\010\uffd4\011\uffd4\013\uffd4\014\uffd4\023\uffd4\026" +
    "\uffd4\034\uffd4\001\002\000\004\014\067\001\002\000\004" +
    "\021\070\001\002\000\004\011\071\001\002\000\010\014" +
    "\uffe9\017\uffe9\040\uffe9\001\002\000\004\016\073\001\002" +
    "\000\004\005\uffd3\001\002\000\036\004\uffd8\005\uffd8\006" +
    "\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8" +
    "\015\uffd8\022\uffd8\023\uffd8\026\uffd8\034\uffd8\001\002\000" +
    "\024\004\010\010\023\016\047\020\041\021\021\022\040" +
    "\024\045\025\035\041\044\001\002\000\010\005\uffe7\013" +
    "\uffe7\026\uffe7\001\002\000\010\004\030\010\023\022\024" +
    "\001\002\000\036\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010" +
    "\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\022\uffd9" +
    "\023\uffd9\026\uffd9\034\uffd9\001\002\000\006\007\102\023" +
    "\052\001\002\000\040\004\uffeb\005\uffeb\006\uffeb\007\uffeb" +
    "\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\017" +
    "\uffeb\022\uffeb\023\uffeb\026\uffeb\034\uffeb\001\002\000\024" +
    "\004\010\010\023\016\047\020\041\021\021\022\040\024" +
    "\045\025\035\041\044\001\002\000\004\010\113\001\002" +
    "\000\024\004\uffec\006\uffec\010\uffec\011\uffec\012\uffec\015" +
    "\uffec\017\111\022\uffec\023\uffec\001\002\000\010\010\uffcd" +
    "\011\uffcd\023\052\001\002\000\004\011\110\001\002\000" +
    "\036\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1" +
    "\012\uffd1\013\uffd1\014\uffd1\015\uffd1\022\uffd1\023\uffd1\026" +
    "\uffd1\034\uffd1\001\002\000\024\004\010\010\023\016\047" +
    "\020\041\021\021\022\040\024\045\025\035\041\044\001" +
    "\002\000\010\010\uffce\011\uffce\023\052\001\002\000\006" +
    "\013\114\014\116\001\002\000\026\004\uffcb\006\uffcb\010" +
    "\uffcb\016\uffcb\020\uffcb\021\uffcb\022\uffcb\024\uffcb\025\uffcb" +
    "\041\uffcb\001\002\000\026\004\010\006\103\010\023\016" +
    "\047\020\041\021\105\022\040\024\045\025\035\041\044" +
    "\001\002\000\026\004\uffcc\006\uffcc\010\uffcc\016\uffcc\020" +
    "\uffcc\021\uffcc\022\uffcc\024\uffcc\025\uffcc\041\uffcc\001\002" +
    "\000\004\011\120\001\002\000\004\011\uffd0\001\002\000" +
    "\006\007\122\023\052\001\002\000\004\017\123\001\002" +
    "\000\024\004\010\010\023\016\047\020\041\021\021\022" +
    "\040\024\045\025\035\041\044\001\002\000\010\010\uffcf" +
    "\011\uffcf\023\052\001\002\000\006\004\010\021\021\001" +
    "\002\000\004\017\uffed\001\002\000\004\027\130\001\002" +
    "\000\004\013\ufffa\001\002\000\004\004\054\001\002\000" +
    "\004\010\133\001\002\000\004\012\134\001\002\000\004" +
    "\021\135\001\002\000\004\011\136\001\002\000\004\015" +
    "\137\001\002\000\004\021\140\001\002\000\004\004\uffef" +
    "\001\002\000\004\013\ufff4\001\002\000\004\002\001\001" +
    "\002\000\024\004\010\010\023\016\047\020\041\021\021" +
    "\022\040\024\045\025\035\041\044\001\002\000\004\013" +
    "\ufffc\001\002\000\006\023\052\034\146\001\002\000\024" +
    "\004\010\021\021\026\017\030\005\031\004\033\013\037" +
    "\006\041\016\042\012\001\002\000\004\010\150\001\002" +
    "\000\004\035\151\001\002\000\024\004\010\010\023\016" +
    "\047\020\041\021\021\022\040\024\045\025\035\041\044" +
    "\001\002\000\006\023\052\034\153\001\002\000\024\004" +
    "\010\021\021\026\017\030\005\031\004\033\013\037\006" +
    "\041\016\042\012\001\002\000\004\011\155\001\002\000" +
    "\004\036\156\001\002\000\024\004\010\021\021\026\017" +
    "\030\005\031\004\033\013\037\006\041\016\042\012\001" +
    "\002\000\004\027\160\001\002\000\004\013\ufff7\001\002" +
    "\000\004\017\165\001\002\000\004\021\163\001\002\000" +
    "\004\004\054\001\002\000\004\013\ufff3\001\002\000\024" +
    "\004\010\010\023\016\047\020\041\021\021\022\040\024" +
    "\045\025\035\041\044\001\002\000\004\013\ufff2\001\002" +
    "\000\042\002\000\004\010\010\000\011\000\021\021\026" +
    "\017\027\000\030\005\031\004\032\000\033\013\037\006" +
    "\041\016\042\012\043\171\044\173\001\002\000\004\013" +
    "\175\001\002\000\024\004\010\010\023\016\047\020\041" +
    "\021\021\022\040\024\045\025\035\041\044\001\002\000" +
    "\014\002\uffff\010\uffff\011\uffff\027\uffff\032\uffff\001\002" +
    "\000\004\013\ufff0\001\002\000\004\013\ufff1\001\002\000" +
    "\014\002\ufffe\010\ufffe\011\ufffe\027\ufffe\032\ufffe\001\002" +
    "\000\006\005\177\023\052\001\002\000\036\004\uffdb\005" +
    "\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb" +
    "\014\uffdb\015\uffdb\022\uffdb\023\uffdb\026\uffdb\034\uffdb\001" +
    "\002\000\004\040\213\001\002\000\006\010\066\017\202" +
    "\001\002\000\024\004\010\010\023\016\047\020\041\021" +
    "\021\022\040\024\045\025\035\041\044\001\002\000\006" +
    "\014\204\023\052\001\002\000\024\004\010\010\023\016" +
    "\047\020\041\021\021\022\040\024\045\025\035\041\044" +
    "\001\002\000\006\014\206\023\052\001\002\000\024\004" +
    "\010\010\023\016\047\020\041\021\021\022\040\024\045" +
    "\025\035\041\044\001\002\000\006\023\052\026\210\001" +
    "\002\000\024\004\010\021\021\026\017\030\005\031\004" +
    "\033\013\037\006\041\016\042\012\001\002\000\004\027" +
    "\212\001\002\000\004\013\ufff6\001\002\000\024\004\010" +
    "\010\023\016\047\020\041\021\021\022\040\024\045\025" +
    "\035\041\044\001\002\000\004\026\215\001\002\000\024" +
    "\004\010\021\021\026\017\030\005\031\004\033\013\037" +
    "\006\041\016\042\012\001\002\000\004\027\217\001\002" +
    "\000\004\013\ufff5\001\002\000\006\023\052\026\221\001" +
    "\002\000\024\004\010\021\021\026\017\030\005\031\004" +
    "\033\013\037\006\041\016\042\012\001\002\000\004\027" +
    "\223\001\002\000\004\013\ufff9\001\002\000\004\032\225" +
    "\001\002\000\024\004\010\010\023\016\047\020\041\021" +
    "\021\022\040\024\045\025\035\041\044\001\002\000\006" +
    "\013\ufff8\023\052\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\016\002\014\003\010\006\013\010\006\016" +
    "\017\017\021\001\001\000\020\002\063\003\010\005\223" +
    "\006\013\010\006\016\017\017\021\001\001\000\016\010" +
    "\033\011\217\013\036\016\045\017\047\020\042\001\001" +
    "\000\004\012\177\001\001\000\002\001\001\000\016\010" +
    "\033\011\175\013\036\016\045\017\047\020\042\001\001" +
    "\000\002\001\001\000\004\012\160\001\001\000\016\010" +
    "\033\011\144\013\036\016\045\017\047\020\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\130\001" +
    "\001\000\020\002\063\003\010\005\126\006\013\010\006" +
    "\016\017\017\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\031\021\025\001\001\000\022\010\033" +
    "\011\105\013\036\016\045\017\047\020\042\023\106\024" +
    "\103\001\001\000\002\001\001\000\016\010\033\011\100" +
    "\013\036\016\045\017\047\020\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\007\041\010\033\011\035" +
    "\013\036\016\045\017\047\020\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\054\001\001\000\016\010\033\011" +
    "\050\013\036\016\045\017\047\020\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\031\021\025\001" +
    "\001\000\002\001\001\000\016\010\033\011\052\013\036" +
    "\016\045\017\047\020\042\001\001\000\002\001\001\000" +
    "\006\012\055\022\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\002\063\003\010\005\062\006\013\010\006" +
    "\016\017\017\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\007\075\010\033" +
    "\011\035\013\036\016\045\017\047\020\042\001\001\000" +
    "\002\001\001\000\006\020\031\021\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\010" +
    "\033\011\120\013\036\016\045\017\047\020\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\010\033\011\111" +
    "\013\036\016\045\017\047\020\042\001\001\000\002\001" +
    "\001\000\004\025\114\001\001\000\002\001\001\000\020" +
    "\010\033\011\105\013\036\016\045\017\047\020\042\024" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\010" +
    "\033\011\123\013\036\016\045\017\047\020\042\001\001" +
    "\000\002\001\001\000\012\006\125\010\033\016\017\017" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\007\143\010\033\011\035" +
    "\013\036\016\045\017\047\020\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\002\063\003\010\005\146" +
    "\006\013\010\006\016\017\017\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\010\033\011\151\013\036" +
    "\016\045\017\047\020\042\001\001\000\002\001\001\000" +
    "\020\002\063\003\010\005\153\006\013\010\006\016\017" +
    "\017\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\002\063\003\010\005\156\006\013\010\006\016\017" +
    "\017\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\163\001\001" +
    "\000\002\001\001\000\020\007\165\010\033\011\035\013" +
    "\036\016\045\017\047\020\042\001\001\000\002\001\001" +
    "\000\020\002\171\003\010\004\167\006\013\010\006\016" +
    "\017\017\021\001\001\000\002\001\001\000\020\007\173" +
    "\010\033\011\035\013\036\016\045\017\047\020\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\010\033\011\202" +
    "\013\036\016\045\017\047\020\042\001\001\000\002\001" +
    "\001\000\016\010\033\011\204\013\036\016\045\017\047" +
    "\020\042\001\001\000\002\001\001\000\016\010\033\011" +
    "\206\013\036\016\045\017\047\020\042\001\001\000\002" +
    "\001\001\000\020\002\063\003\010\005\210\006\013\010" +
    "\006\016\017\017\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\007\213\010\033\011\035\013\036\016" +
    "\045\017\047\020\042\001\001\000\002\001\001\000\020" +
    "\002\063\003\010\005\215\006\013\010\006\016\017\017" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\002\063\003\010\005\221\006\013\010" +
    "\006\016\017\017\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\010\033\011\225\013" +
    "\036\016\045\017\047\020\042\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalisadorSintatico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalisadorSintatico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalisadorSintatico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info)  {
        System.out.println("Warning - " + message);
    }

    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message);
        System.exit(-1);
    }

	public void syntax_error(Symbol cur_token) {
		System.out.println("Syntax Error - " + cur_token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalisadorSintatico$actions {
  private final AnalisadorSintatico parser;

  /** Constructor */
  CUP$AnalisadorSintatico$actions(AnalisadorSintatico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalisadorSintatico$do_action(
    int                        CUP$AnalisadorSintatico$act_num,
    java_cup.runtime.lr_parser CUP$AnalisadorSintatico$parser,
    java.util.Stack            CUP$AnalisadorSintatico$stack,
    int                        CUP$AnalisadorSintatico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalisadorSintatico$result;

      /* select the action based on the action number */
      switch (CUP$AnalisadorSintatico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // fieldsep ::= PVIRGULA 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("fieldsep",19, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // fieldsep ::= VIRGULA 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("fieldsep",19, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // field ::= exp 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("field",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // field ::= NAME ATRIBUICAO exp 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("field",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // field ::= ACOL exp FCOL ATRIBUICAO exp 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("field",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // fieldlist ::= field ACHA fieldsep field FCHA 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("fieldlist",17, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tableconstructor ::= ACHA fieldlist FCHA 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("tableconstructor",14, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parlist ::= TPONTOS 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("parlist",16, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parlist ::= namelist VIRGULA TPONTOS 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("parlist",16, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // funcbody ::= APAR parlist FPAR block END 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("funcbody",11, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // function ::= FUNCTION funcbody 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("function",9, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // args ::= STRING 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("args",15, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // args ::= tableconstructor 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("args",15, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // args ::= APAR explist FPAR 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("args",15, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // functioncall ::= prefixexp DPONTOS NAME args 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("functioncall",6, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // functioncall ::= prefixexp args 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("functioncall",6, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // prefixexp ::= APAR exp FPAR 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("prefixexp",13, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // prefixexp ::= functioncall 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("prefixexp",13, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // prefixexp ::= var 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("prefixexp",13, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= UNOP exp 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= exp BINOP exp 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= tableconstructor 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= prefixexp 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= function 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= TPONTOS 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= STRING 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= NUMBER 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node(t.value,t.start); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= VALUE 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // explist ::= exp VIRGULA explist 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("explist",5, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // explist ::= exp 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("explist",5, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // namelist ::= NAME ACHA VIRGULA NAME FCHA 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("namelist",8, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // var ::= prefixexp PONTO NAME 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("var",12, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var ::= prefixexp ACOL exp FCOL 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("var",12, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var ::= NAME 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node(t.value,t.start); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("var",12, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // varlist ::= var VIRGULA varlist 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("varlist",4, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // varlist ::= var 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("varlist",4, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funcname ::= NAME ACHA PONTO NAME FCHA DPONTOS NAME 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("funcname",10, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // laststat ::= BREAK 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("laststat",2, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // laststat ::= RETURN explist 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("laststat",2, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stat ::= LOCAL namelist ATRIBUICAO explist 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stat ::= LOCAL FUNCTION NAME funcbody 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stat ::= FUNCTION funcname funcbody 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stat ::= FOR namelist IN explist DO block END 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stat ::= FOR NAME ATRIBUICAO exp VIRGULA exp VIRGULA exp DO block END 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stat ::= IF exp THEN block ACHA ELSEIF exp THEN block FCHA ELSE block END 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stat ::= REPEAT block UNTIL exp 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stat ::= WHILE exp DO block END 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stat ::= DO block END 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stat ::= functioncall 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stat ::= varlist ATRIBUICAO explist 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node(t.value,t.start,n1,n2); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // block ::= chunk 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("block",3, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // chunk ::= stat PVIRGULA laststat PVIRGULA 
            {
              Node RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("chunk",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // chunk ::= stat PVIRGULA chunk 
            {
              Node RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node s1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node s2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node(t.value,t.start,s1,s2); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("chunk",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // chunk ::= stat PVIRGULA 
            {
              Node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node s = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node(t.value,t.start,s,null); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("chunk",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= chunk EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		RESULT = start_val;
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalisadorSintatico$parser.done_parsing();
          return CUP$AnalisadorSintatico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


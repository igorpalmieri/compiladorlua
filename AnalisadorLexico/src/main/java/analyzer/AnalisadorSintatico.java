
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 15 16:50:53 BRST 2016
//----------------------------------------------------

package analyzer;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 15 16:50:53 BRST 2016
  */
public class AnalisadorSintatico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalisadorSintatico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalisadorSintatico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalisadorSintatico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\002\006\000\002\005\003\000\002\003\005" +
    "\000\002\003\003\000\002\003\005\000\002\003\007\000" +
    "\002\003\006\000\002\003\007\000\002\003\010\000\002" +
    "\003\012\000\002\003\013\000\002\003\015\000\002\003" +
    "\011\000\002\003\005\000\002\003\006\000\002\003\004" +
    "\000\002\003\006\000\002\026\006\000\002\026\007\000" +
    "\002\004\004\000\002\004\003\000\002\014\003\000\002" +
    "\014\004\000\002\014\006\000\002\027\004\000\002\027" +
    "\005\000\002\006\003\000\002\006\004\000\002\030\004" +
    "\000\002\030\004\000\002\016\003\000\002\016\006\000" +
    "\002\016\005\000\002\012\003\000\002\012\004\000\002" +
    "\032\004\000\002\032\004\000\002\007\003\000\002\007" +
    "\004\000\002\033\004\000\002\033\004\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\005\000\002\011\004\000\002\017\003\000\002\017" +
    "\003\000\002\017\005\000\002\010\004\000\002\010\006" +
    "\000\002\021\005\000\002\021\003\000\002\021\003\000" +
    "\002\013\004\000\002\015\007\000\002\022\003\000\002" +
    "\022\005\000\002\022\003\000\002\020\005\000\002\023" +
    "\004\000\002\023\005\000\002\031\004\000\002\031\005" +
    "\000\002\024\007\000\002\024\005\000\002\024\003\000" +
    "\002\025\003\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\024\004\010\021\021\026\017\030\005\031" +
    "\004\033\013\037\006\041\016\042\011\001\002\000\024" +
    "\004\010\021\021\026\017\030\005\031\004\033\013\037" +
    "\006\041\016\042\011\001\002\000\024\004\010\010\023" +
    "\016\046\020\041\021\021\022\040\024\045\025\035\041" +
    "\044\001\002\000\004\021\205\001\002\000\020\004\uffcb" +
    "\006\uffcb\010\uffcb\012\uffcb\013\ufffb\015\uffcb\022\uffcb\001" +
    "\002\000\024\004\010\010\023\016\046\020\041\021\021" +
    "\022\040\024\045\025\035\041\044\001\002\000\006\021" +
    "\060\041\175\001\002\000\004\013\165\001\002\000\024" +
    "\004\010\010\023\016\046\020\041\021\021\022\040\024" +
    "\045\025\035\041\044\001\002\000\004\017\145\001\002" +
    "\000\004\002\144\001\002\000\004\021\134\001\002\000" +
    "\024\004\010\021\021\026\017\030\005\031\004\033\013" +
    "\037\006\041\016\042\011\001\002\000\022\004\uffcc\006" +
    "\uffcc\010\uffcc\012\uffcc\014\067\015\uffcc\017\uffe4\022\uffcc" +
    "\001\002\000\042\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010" +
    "\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\017\uffe0" +
    "\022\uffe0\023\uffe0\026\uffe0\034\uffe0\040\uffe0\001\002\000" +
    "\016\004\030\006\026\010\023\012\031\015\027\022\024" +
    "\001\002\000\026\004\010\006\105\010\023\016\046\020" +
    "\041\021\107\022\040\024\045\025\035\041\044\001\002" +
    "\000\036\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011" +
    "\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\022\uffc5\023\uffc5" +
    "\026\uffc5\034\uffc5\001\002\000\036\004\uffc9\005\uffc9\006" +
    "\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9" +
    "\015\uffc9\022\uffc9\023\uffc9\026\uffc9\034\uffc9\001\002\000" +
    "\024\004\010\010\023\016\046\020\041\021\021\022\040" +
    "\024\045\025\035\041\044\001\002\000\004\021\101\001" +
    "\002\000\024\004\010\010\023\016\046\020\041\021\021" +
    "\022\040\024\045\025\035\041\044\001\002\000\004\021" +
    "\033\001\002\000\036\004\uffc6\005\uffc6\006\uffc6\007\uffc6" +
    "\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\022" +
    "\uffc6\023\uffc6\026\uffc6\034\uffc6\001\002\000\042\004\uffde" +
    "\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013" +
    "\uffde\014\uffde\015\uffde\017\uffde\022\uffde\023\uffde\026\uffde" +
    "\034\uffde\040\uffde\001\002\000\036\004\uffcb\005\uffcb\006" +
    "\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb" +
    "\015\uffcb\022\uffcb\023\uffcb\026\uffcb\034\uffcb\001\002\000" +
    "\022\005\uffd4\007\uffd4\011\uffd4\013\uffd4\014\uffd4\023\uffd4" +
    "\026\uffd4\034\uffd4\001\002\000\014\005\uffd9\013\uffd9\014" +
    "\076\023\052\026\uffd9\001\002\000\022\005\uffd1\007\uffd1" +
    "\011\uffd1\013\uffd1\014\uffd1\023\uffd1\026\uffd1\034\uffd1\001" +
    "\002\000\022\005\uffd3\007\uffd3\011\uffd3\013\uffd3\014\uffd3" +
    "\023\uffd3\026\uffd3\034\uffd3\001\002\000\022\005\uffd5\007" +
    "\uffd5\011\uffd5\013\uffd5\014\uffd5\023\uffd5\026\uffd5\034\uffd5" +
    "\001\002\000\004\005\074\001\002\000\022\005\uffcf\007" +
    "\uffcf\011\uffcf\013\uffcf\014\uffcf\023\uffcf\026\uffcf\034\uffcf" +
    "\001\002\000\004\004\054\001\002\000\024\004\010\010" +
    "\023\016\046\020\041\021\021\022\040\024\045\025\035" +
    "\041\044\001\002\000\022\005\uffd2\007\uffd2\011\uffd2\013" +
    "\uffd2\014\uffd2\023\uffd2\026\uffd2\034\uffd2\001\002\000\036" +
    "\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\022\uffcc\023\uffcc\026\uffcc" +
    "\034\uffcc\001\002\000\036\004\030\005\uffd0\006\026\007" +
    "\uffd0\010\023\011\uffd0\012\031\013\uffd0\014\uffd0\015\027" +
    "\022\024\023\uffd0\026\uffd0\034\uffd0\001\002\000\022\005" +
    "\uffcd\007\uffcd\011\uffcd\013\uffcd\014\uffcd\023\052\026\uffcd" +
    "\034\uffcd\001\002\000\024\004\010\010\023\016\046\020" +
    "\041\021\021\022\040\024\045\025\035\041\044\001\002" +
    "\000\022\005\uffce\007\uffce\011\uffce\013\uffce\014\uffce\023" +
    "\052\026\uffce\034\uffce\001\002\000\006\016\057\021\060" +
    "\001\002\000\022\005\uffc4\007\uffc4\011\uffc4\013\uffc4\014" +
    "\uffc4\023\uffc4\026\uffc4\034\uffc4\001\002\000\006\005\uffc2" +
    "\014\072\001\002\000\004\005\uffc0\001\002\000\012\005" +
    "\uffdd\013\uffdd\014\067\017\uffdd\001\002\000\004\005\062" +
    "\001\002\000\024\004\010\021\021\026\017\030\005\031" +
    "\004\033\013\037\006\041\016\042\011\001\002\000\004" +
    "\027\065\001\002\000\012\027\ufffd\032\ufffd\035\ufffd\036" +
    "\ufffd\001\002\000\022\005\uffc3\007\uffc3\011\uffc3\013\uffc3" +
    "\014\uffc3\023\uffc3\026\uffc3\034\uffc3\001\002\000\014\005" +
    "\uffdc\013\uffdc\014\uffdc\017\uffdc\040\uffdc\001\002\000\010" +
    "\004\010\014\067\021\021\001\002\000\030\004\uffcc\005" +
    "\uffe2\006\uffcc\010\uffcc\012\uffcc\013\uffe2\014\uffe2\015\uffcc" +
    "\017\uffe2\022\uffcc\040\uffe2\001\002\000\014\005\uffe1\013" +
    "\uffe1\014\uffe1\017\uffe1\040\uffe1\001\002\000\004\016\073" +
    "\001\002\000\004\005\uffc1\001\002\000\036\004\uffc7\005" +
    "\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7" +
    "\014\uffc7\015\uffc7\022\uffc7\023\uffc7\026\uffc7\034\uffc7\001" +
    "\002\000\010\005\uffd8\013\uffd8\026\uffd8\001\002\000\026" +
    "\004\010\010\023\014\076\016\046\020\041\021\021\022" +
    "\040\024\045\025\035\041\044\001\002\000\010\005\uffd6" +
    "\013\uffd6\026\uffd6\001\002\000\012\005\uffd7\013\uffd7\023" +
    "\052\026\uffd7\001\002\000\010\004\030\010\023\022\024" +
    "\001\002\000\036\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010" +
    "\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\022\uffc8" +
    "\023\uffc8\026\uffc8\034\uffc8\001\002\000\006\007\104\023" +
    "\052\001\002\000\042\004\uffdf\005\uffdf\006\uffdf\007\uffdf" +
    "\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\017" +
    "\uffdf\022\uffdf\023\uffdf\026\uffdf\034\uffdf\040\uffdf\001\002" +
    "\000\024\004\010\010\023\016\046\020\041\021\021\022" +
    "\040\024\045\025\035\041\044\001\002\000\006\013\115" +
    "\014\120\001\002\000\030\004\uffe0\006\uffe0\010\uffe0\011" +
    "\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\017\113\022\uffe0" +
    "\023\uffe0\001\002\000\012\011\uffb8\013\uffb8\014\uffb8\023" +
    "\052\001\002\000\004\011\112\001\002\000\036\004\uffbf" +
    "\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013" +
    "\uffbf\014\uffbf\015\uffbf\022\uffbf\023\uffbf\026\uffbf\034\uffbf" +
    "\001\002\000\024\004\010\010\023\016\046\020\041\021" +
    "\021\022\040\024\045\025\035\041\044\001\002\000\012" +
    "\011\uffb9\013\uffb9\014\uffb9\023\052\001\002\000\030\004" +
    "\uffb6\006\uffb6\010\uffb6\011\uffb6\016\uffb6\020\uffb6\021\uffb6" +
    "\022\uffb6\024\uffb6\025\uffb6\041\uffb6\001\002\000\026\004" +
    "\010\006\105\010\023\016\046\020\041\021\107\022\040" +
    "\024\045\025\035\041\044\001\002\000\010\011\uffbe\013" +
    "\115\014\120\001\002\000\030\004\uffb7\006\uffb7\010\uffb7" +
    "\011\uffb7\016\uffb7\020\uffb7\021\uffb7\022\uffb7\024\uffb7\025" +
    "\uffb7\041\uffb7\001\002\000\004\011\uffbd\001\002\000\010" +
    "\011\uffbc\013\115\014\120\001\002\000\010\011\uffbb\013" +
    "\uffbb\014\uffbb\001\002\000\006\007\125\023\052\001\002" +
    "\000\004\017\126\001\002\000\024\004\010\010\023\016" +
    "\046\020\041\021\021\022\040\024\045\025\035\041\044" +
    "\001\002\000\012\011\uffba\013\uffba\014\uffba\023\052\001" +
    "\002\000\004\017\uffe3\001\002\000\004\027\132\001\002" +
    "\000\004\013\ufffa\001\002\000\004\004\054\001\002\000" +
    "\006\004\uffe9\012\136\001\002\000\006\004\uffe8\015\141" +
    "\001\002\000\004\021\137\001\002\000\010\004\uffe6\012" +
    "\136\015\uffe6\001\002\000\006\004\uffe5\015\uffe5\001\002" +
    "\000\004\021\142\001\002\000\004\004\uffe7\001\002\000" +
    "\004\013\ufff1\001\002\000\004\002\001\001\002\000\024" +
    "\004\010\010\023\016\046\020\041\021\021\022\040\024" +
    "\045\025\035\041\044\001\002\000\004\013\ufffc\001\002" +
    "\000\006\023\052\034\150\001\002\000\024\004\010\021" +
    "\021\026\017\030\005\031\004\033\013\037\006\041\016" +
    "\042\011\001\002\000\006\027\154\035\152\001\002\000" +
    "\024\004\010\010\023\016\046\020\041\021\021\022\040" +
    "\024\045\025\035\041\044\001\002\000\006\027\156\036" +
    "\155\001\002\000\004\013\ufff7\001\002\000\024\004\010" +
    "\021\021\026\017\030\005\031\004\033\013\037\006\041" +
    "\016\042\011\001\002\000\004\013\ufff6\001\002\000\004" +
    "\027\160\001\002\000\004\013\ufff5\001\002\000\006\023" +
    "\052\034\162\001\002\000\024\004\010\021\021\026\017" +
    "\030\005\031\004\033\013\037\006\041\016\042\011\001" +
    "\002\000\010\027\uffed\035\152\036\uffed\001\002\000\006" +
    "\027\uffec\036\uffec\001\002\000\042\002\000\004\010\021" +
    "\021\026\017\027\000\030\005\031\004\032\000\033\013" +
    "\035\000\036\000\037\006\041\016\042\011\043\167\044" +
    "\171\001\002\000\004\013\173\001\002\000\024\004\010" +
    "\010\023\016\046\020\041\021\021\022\040\024\045\025" +
    "\035\041\044\001\002\000\014\002\uffff\027\uffff\032\uffff" +
    "\035\uffff\036\uffff\001\002\000\004\013\uffea\001\002\000" +
    "\004\013\uffeb\001\002\000\014\002\ufffe\027\ufffe\032\ufffe" +
    "\035\ufffe\036\ufffe\001\002\000\006\013\uffef\017\200\001" +
    "\002\000\004\021\176\001\002\000\004\004\054\001\002" +
    "\000\004\013\ufff0\001\002\000\024\004\010\010\023\016" +
    "\046\020\041\021\021\022\040\024\045\025\035\041\044" +
    "\001\002\000\004\013\uffee\001\002\000\006\005\203\023" +
    "\052\001\002\000\036\004\uffca\005\uffca\006\uffca\007\uffca" +
    "\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\022" +
    "\uffca\023\uffca\026\uffca\034\uffca\001\002\000\004\040\222" +
    "\001\002\000\010\014\067\017\206\040\uffdd\001\002\000" +
    "\024\004\010\010\023\016\046\020\041\021\021\022\040" +
    "\024\045\025\035\041\044\001\002\000\006\014\210\023" +
    "\052\001\002\000\024\004\010\010\023\016\046\020\041" +
    "\021\021\022\040\024\045\025\035\041\044\001\002\000" +
    "\010\014\213\023\052\026\212\001\002\000\024\004\010" +
    "\021\021\026\017\030\005\031\004\033\013\037\006\041" +
    "\016\042\011\001\002\000\024\004\010\010\023\016\046" +
    "\020\041\021\021\022\040\024\045\025\035\041\044\001" +
    "\002\000\006\023\052\026\215\001\002\000\024\004\010" +
    "\021\021\026\017\030\005\031\004\033\013\037\006\041" +
    "\016\042\011\001\002\000\004\027\217\001\002\000\004" +
    "\013\ufff3\001\002\000\004\027\221\001\002\000\004\013" +
    "\ufff4\001\002\000\024\004\010\010\023\016\046\020\041" +
    "\021\021\022\040\024\045\025\035\041\044\001\002\000" +
    "\004\026\224\001\002\000\024\004\010\021\021\026\017" +
    "\030\005\031\004\033\013\037\006\041\016\042\011\001" +
    "\002\000\004\027\226\001\002\000\004\013\ufff2\001\002" +
    "\000\006\023\052\026\230\001\002\000\024\004\010\021" +
    "\021\026\017\030\005\031\004\033\013\037\006\041\016" +
    "\042\011\001\002\000\004\027\232\001\002\000\004\013" +
    "\ufff9\001\002\000\004\032\234\001\002\000\024\004\010" +
    "\010\023\016\046\020\041\021\021\022\040\024\045\025" +
    "\035\041\044\001\002\000\006\013\ufff8\023\052\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\016\002\014\003\011\006\013\010\006\016" +
    "\017\017\021\001\001\000\020\002\063\003\011\005\232" +
    "\006\013\010\006\016\017\017\021\001\001\000\016\010" +
    "\033\011\226\013\036\016\046\017\047\020\042\001\001" +
    "\000\004\012\203\001\001\000\002\001\001\000\016\010" +
    "\033\011\201\013\036\016\046\017\047\020\042\001\001" +
    "\000\004\012\173\001\001\000\002\001\001\000\016\010" +
    "\033\011\146\013\036\016\046\017\047\020\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\132\001" +
    "\001\000\020\002\063\003\011\005\130\006\013\010\006" +
    "\016\017\017\021\001\001\000\004\030\127\001\001\000" +
    "\002\001\001\000\006\020\031\021\024\001\001\000\022" +
    "\010\033\011\107\013\036\016\046\017\047\020\042\023" +
    "\110\024\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\010\033\011\102\013\036\016\046\017\047\020" +
    "\042\001\001\000\002\001\001\000\020\007\041\010\033" +
    "\011\035\013\036\016\046\017\047\020\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\054\001\001\000" +
    "\016\010\033\011\050\013\036\016\046\017\047\020\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\031\021\024\001\001\000\002\001\001\000\016\010\033" +
    "\011\052\013\036\016\046\017\047\020\042\001\001\000" +
    "\002\001\001\000\006\012\055\022\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\065\001\001\000\002\001\001\000\020\002\063\003\011" +
    "\005\062\006\013\010\006\016\017\017\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\033\016\067\017\021\030\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\010\033\011\077\013\036\016\046\017\047\020\042" +
    "\033\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\031\021\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\010\033\011\123\013" +
    "\036\016\046\017\047\020\042\001\001\000\006\025\115" +
    "\031\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\010\033\011\113" +
    "\013\036\016\046\017\047\020\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\010\033\011\107\013\036" +
    "\016\046\017\047\020\042\024\121\001\001\000\004\025" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\025\115\031\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\010\033\011\126\013\036" +
    "\016\046\017\047\020\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\142\001\001\000\004\027\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\007\145\010\033\011\035" +
    "\013\036\016\046\017\047\020\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\002\063\003\011\005\150" +
    "\006\013\010\006\016\017\017\021\001\001\000\004\026" +
    "\152\001\001\000\016\010\033\011\160\013\036\016\046" +
    "\017\047\020\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\002\063\003\011\005\156\006\013\010\006" +
    "\016\017\017\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\002\063" +
    "\003\011\005\162\006\013\010\006\016\017\017\021\001" +
    "\001\000\004\026\163\001\001\000\002\001\001\000\020" +
    "\002\167\003\011\004\165\006\013\010\006\016\017\017" +
    "\021\001\001\000\002\001\001\000\020\007\171\010\033" +
    "\011\035\013\036\016\046\017\047\020\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\176\001\001\000\002\001\001\000\020\007\200\010\033" +
    "\011\035\013\036\016\046\017\047\020\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\065\001\001\000\016\010\033\011" +
    "\206\013\036\016\046\017\047\020\042\001\001\000\002" +
    "\001\001\000\016\010\033\011\210\013\036\016\046\017" +
    "\047\020\042\001\001\000\002\001\001\000\020\002\063" +
    "\003\011\005\217\006\013\010\006\016\017\017\021\001" +
    "\001\000\016\010\033\011\213\013\036\016\046\017\047" +
    "\020\042\001\001\000\002\001\001\000\020\002\063\003" +
    "\011\005\215\006\013\010\006\016\017\017\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\007\222\010\033\011\035\013\036" +
    "\016\046\017\047\020\042\001\001\000\002\001\001\000" +
    "\020\002\063\003\011\005\224\006\013\010\006\016\017" +
    "\017\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\002\063\003\011\005\230\006\013" +
    "\010\006\016\017\017\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\010\033\011\234" +
    "\013\036\016\046\017\047\020\042\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalisadorSintatico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalisadorSintatico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalisadorSintatico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info)  {
        System.out.println("Warning - " + message);
    }

    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message);
        System.exit(-1);
    }

	public void syntax_error(Symbol cur_token) {
		System.out.println("Syntax Error - " + ((LUAToken)cur_token.value).value);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalisadorSintatico$actions {
  private final AnalisadorSintatico parser;

  /** Constructor */
  CUP$AnalisadorSintatico$actions(AnalisadorSintatico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalisadorSintatico$do_action(
    int                        CUP$AnalisadorSintatico$act_num,
    java_cup.runtime.lr_parser CUP$AnalisadorSintatico$parser,
    java.util.Stack            CUP$AnalisadorSintatico$stack,
    int                        CUP$AnalisadorSintatico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalisadorSintatico$result;

      /* select the action based on the action number */
      switch (CUP$AnalisadorSintatico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // fieldsep ::= PVIRGULA 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node(t1); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("fieldsep",19, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // fieldsep ::= VIRGULA 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node(t1); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("fieldsep",19, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // field ::= exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = n1; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("field",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // field ::= NAME ATRIBUICAO exp 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),new Node(t2),n1}; RESULT = new Node("field",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("field",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // field ::= ACOL exp FCOL ATRIBUICAO exp 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,new Node(t2),new Node(t3),n2}; RESULT = new Node("field",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("field",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // fieldlist2 ::= fieldsep field fieldlist2 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n3 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,n2,n3}; RESULT = new Node("fieldlist2",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("fieldlist2",23, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // fieldlist2 ::= fieldsep field 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,n2}; RESULT = new Node("fieldlist2",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("fieldlist2",23, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // fieldlist ::= field fieldlist2 fieldsep 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n3 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,n2,n3}; RESULT = new Node("fieldlist",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("fieldlist",17, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // fieldlist ::= field fieldlist2 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,n2}; RESULT = new Node("fieldlist",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("fieldlist",17, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tableconstructor ::= ACHA fieldlist FCHA 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,new Node(t2)}; RESULT = new Node("tableconstructor",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("tableconstructor",14, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parlist ::= TPONTOS 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node(t1); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("parlist",16, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parlist ::= namelist VIRGULA TPONTOS 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,new Node(t1),new Node(t2)}; RESULT = new Node("parlist",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("parlist",16, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // parlist ::= namelist 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = n1; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("parlist",16, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // funcbody ::= APAR parlist FPAR block END 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,new Node(t2),n2,new Node(t3)}; RESULT = new Node("funcbody",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("funcbody",11, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // function ::= FUNCTION funcbody 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1}; RESULT = new Node("function",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("function",9, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // args ::= STRING 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node(t1); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("args",15, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // args ::= tableconstructor 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = n1; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("args",15, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // args ::= APAR explist FPAR 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,new Node(t2)}; RESULT = new Node("args",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("args",15, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // functioncall ::= prefixexp DPONTOS NAME args 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,new Node(t1),new Node(t2),n2}; RESULT = new Node("functioncall",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("functioncall",6, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // functioncall ::= prefixexp args 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,n2}; RESULT = new Node("functioncall",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("functioncall",6, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // prefixexp ::= APAR exp FPAR 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,new Node(t2)}; RESULT = new Node("prefixexp",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("prefixexp",13, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // prefixexp ::= functioncall 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = n1; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("prefixexp",13, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // prefixexp ::= var 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = n1; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("prefixexp",13, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= UNOP exp 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1}; RESULT = new Node("exp",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp BINOP exp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,new Node(t1),n2}; RESULT = new Node("exp",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= tableconstructor 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = n1; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= prefixexp 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = n1; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= function 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = n1; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= TPONTOS 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node(t1); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= STRING 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node(t1); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= NUMBER 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node(t1); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= VALUE 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node(t1); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // explist2 ::= VIRGULA explist2 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1}; RESULT = new Node("explist2",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("explist2",25, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // explist2 ::= VIRGULA exp 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1}; RESULT = new Node("explist2",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("explist2",25, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // explist ::= exp explist2 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,n2}; RESULT = new Node("explist",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("explist",5, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // explist ::= exp 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("explist",5, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // namelist2 ::= VIRGULA namelist2 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1}; RESULT = new Node("namelist2",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("namelist2",24, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // namelist2 ::= VIRGULA NAME 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),new Node(t2)}; RESULT = new Node("namelist2",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("namelist2",24, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // namelist ::= NAME varlist2 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1}; RESULT = new Node("namelist",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("namelist",8, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // namelist ::= NAME 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node(t1); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("namelist",8, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // var ::= prefixexp PONTO NAME 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,new Node(t1),new Node(t2)}; RESULT = new Node("var",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("var",12, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // var ::= prefixexp ACOL exp FCOL 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,new Node(t1),n2,new Node(t2)}; RESULT = new Node("var",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("var",12, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // var ::= NAME 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = new Node(t); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("var",12, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // varlist2 ::= VIRGULA varlist2 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1}; RESULT = new Node("varlist2",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("varlist2",22, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // varlist2 ::= VIRGULA var 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1}; RESULT = new Node("varlist2",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("varlist2",22, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // varlist ::= var varlist2 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,n2}; RESULT = new Node("varlist",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("varlist",4, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // varlist ::= var 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("varlist",4, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // funcname2 ::= PONTO NAME funcname2 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),new Node(t2),n1}; RESULT = new Node("laststat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("funcname2",21, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // funcname2 ::= PONTO NAME 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),new Node(t2)}; RESULT = new Node("funcname2",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("funcname2",21, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // funcname ::= NAME funcname2 DPONTOS NAME 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,new Node(t2),new Node(t3)}; RESULT = new Node("funcname",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("funcname",10, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // funcname ::= NAME funcname2 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1}; RESULT = new Node("funcname",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("funcname",10, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // funcname ::= NAME 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1)}; RESULT = new Node("funcname",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("funcname",10, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // laststat ::= BREAK 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1)}; RESULT = new Node("laststat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("laststat",2, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // laststat ::= RETURN explist 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1}; RESULT = new Node("laststat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("laststat",2, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // elseif ::= ELSEIF exp THEN block elseif 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n3 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,new Node(t2),n2,n3}; RESULT = new Node("elseif",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("elseif",20, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // elseif ::= ELSEIF exp THEN block 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,new Node(t2),n2}; RESULT = new Node("elseif",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("elseif",20, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stat ::= LOCAL namelist ATRIBUICAO explist 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,new Node(t2),n2}; RESULT = new Node("stat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stat ::= LOCAL namelist 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1}; RESULT = new Node("stat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stat ::= LOCAL FUNCTION NAME funcbody 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),new Node(t2),new Node(t3),n1}; RESULT = new Node("stat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stat ::= FUNCTION funcname funcbody 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,n2}; RESULT = new Node("stat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stat ::= FOR namelist IN explist DO block END 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n3 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t4 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,new Node(t2),n2,new Node(t3),n3, new Node(t4)}; RESULT = new Node("stat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stat ::= FOR NAME ATRIBUICAO exp VIRGULA exp VIRGULA exp DO block END 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-10)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-10)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-10)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-9)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-9)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-9)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-8)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-8)).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-7)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-7)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).right;
		LUAToken t4 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		LUAToken t5 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n3 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t6 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n4 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t7 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),new Node(t2),new Node(t3),n1,new Node(t4),n2,new Node(t5),n3,new Node(t6),n4,new Node(t7)}; RESULT = new Node("stat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stat ::= FOR NAME ATRIBUICAO exp VIRGULA exp DO block END 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-8)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-8)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-8)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-7)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-7)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-7)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		LUAToken t4 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t5 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n3 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t6 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),new Node(t2),new Node(t3),n1,new Node(t4),n2,new Node(t5),n3,new Node(t6)}; RESULT = new Node("stat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stat ::= IF exp THEN block elseif ELSE block END 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-7)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-7)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-6)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n3 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n4 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t4 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,new Node(t2),n2,n3,new Node(t3),n4,new Node(t4)}; RESULT = new Node("stat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stat ::= IF exp THEN block elseif END 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n3 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,new Node(t2),n2,n3,new Node(t3)}; RESULT = new Node("stat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stat ::= IF exp THEN block END 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,new Node(t2),n2,new Node(t3)}; RESULT = new Node("stat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stat ::= REPEAT block UNTIL exp 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,new Node(t2),n2}; RESULT = new Node("stat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stat ::= WHILE exp DO block END 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t3 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n1,new Node(t2),n2,new Node(t3)}; RESULT = new Node("stat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stat ::= DO block END 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {new Node(t1),n,new Node(t2)}; RESULT = new Node("stat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stat ::= functioncall 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stat ::= varlist ATRIBUICAO explist 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,new Node(t),n2}; RESULT = new Node("stat",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // block ::= chunk 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n}; RESULT = new Node("block",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("block",3, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // chunk ::= stat PVIRGULA laststat PVIRGULA 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		LUAToken t1 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t2 = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,new Node(t1),n2,new Node(t2)}; RESULT = new Node("chunk",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("chunk",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // chunk ::= stat PVIRGULA chunk 
            {
              Node RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Node n1 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		LUAToken t = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Node n2 = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n1,new Node(t),n2}; RESULT = new Node("chunk",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("chunk",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // chunk ::= stat PVIRGULA 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		LUAToken t = (LUAToken)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 Node[] k = {n,new Node(t)}; RESULT = new Node("chunk",k); 
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("chunk",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= chunk EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		RESULT = start_val;
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalisadorSintatico$parser.done_parsing();
          return CUP$AnalisadorSintatico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

